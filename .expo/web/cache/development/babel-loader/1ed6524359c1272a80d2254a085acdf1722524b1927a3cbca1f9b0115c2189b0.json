{"ast":null,"code":"import { IgnorePattern, LogData } from './Data/LogBoxData';\nimport { ExtendedExceptionData } from './Data/parseLogBoxLog';\nexport { LogData, ExtendedExceptionData, IgnorePattern };\nlet LogBox;\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const {\n    parseLogBoxLog,\n    parseInterpolation\n  } = require('./Data/parseLogBoxLog');\n  let originalConsoleError;\n  let consoleErrorImpl;\n  let isLogBoxInstalled = false;\n  LogBox = {\n    install() {\n      if (isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = true;\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        console.error = (...args) => {\n          consoleErrorImpl?.(...args);\n        };\n      }\n      consoleErrorImpl = registerError;\n      if (process.env.NODE_ENV === 'test') {\n        LogBoxData.setDisabled(true);\n      }\n    },\n    uninstall() {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n      isLogBoxInstalled = false;\n      consoleErrorImpl = originalConsoleError;\n      delete console.disableLogBox;\n    },\n    isInstalled() {\n      return isLogBoxInstalled;\n    },\n    ignoreLogs(patterns) {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n    ignoreAllLogs(value) {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n    clearAllLogs() {\n      LogBoxData.clear();\n    },\n    addLog(log) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n    addException(error) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    }\n  };\n  const isWarningModuleWarning = (...args) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n  const registerError = (...args) => {\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError?.(...args);\n      return;\n    }\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        originalConsoleError?.(...args);\n        return;\n      }\n      const {\n        category,\n        message,\n        componentStack\n      } = parseLogBoxLog(args);\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        const interpolated = parseInterpolation(args);\n        originalConsoleError?.(interpolated.message.content);\n        LogBoxData.addLog({\n          level: /did not match\\. Server:/.test(message.content) ? 'fatal' : 'error',\n          category,\n          message,\n          componentStack\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install() {},\n    uninstall() {},\n    isInstalled() {\n      return false;\n    },\n    ignoreLogs(_patterns) {},\n    ignoreAllLogs(_value) {},\n    clearAllLogs() {},\n    addLog(_log) {},\n    addException(_ex) {}\n  };\n}\nexport default LogBox;","map":{"version":3,"names":["IgnorePattern","LogData","ExtendedExceptionData","LogBox","__DEV__","LogBoxData","require","parseLogBoxLog","parseInterpolation","originalConsoleError","consoleErrorImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","args","registerError","process","env","NODE_ENV","setDisabled","uninstall","disableLogBox","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","value","clearAllLogs","clear","addLog","log","addException","isWarningModuleWarning","startsWith","isLogBoxErrorMessage","category","message","componentStack","isMessageIgnored","content","interpolated","level","test","err","reportUnexpectedLogBoxError","_patterns","_value","_log","_ex"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/@expo/metro-runtime/src/error-overlay/LogBox.web.ts"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { IgnorePattern, LogData } from './Data/LogBoxData';\nimport { ExtendedExceptionData } from './Data/parseLogBoxLog';\n\nexport { LogData, ExtendedExceptionData, IgnorePattern };\n\nlet LogBox: ILogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs(patterns: readonly IgnorePattern[]): void;\n  ignoreAllLogs(ignore?: boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const { parseLogBoxLog, parseInterpolation } =\n    require('./Data/parseLogBoxLog') as typeof import('./Data/parseLogBoxLog');\n\n  let originalConsoleError: typeof console.error | undefined;\n  let consoleErrorImpl: typeof console.error | undefined;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      // require(\"../NativeModules/specs/NativeLogBox\");\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n\n        console.error = (...args) => {\n          consoleErrorImpl?.(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n\n      if (process.env.NODE_ENV === 'test') {\n        LogBoxData.setDisabled(true);\n      }\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      delete (console as any).disableLogBox;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isWarningModuleWarning = (...args: any) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerError = (...args: Parameters<typeof console.error>): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError?.(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError?.(...args);\n        return;\n      }\n\n      const { category, message, componentStack } = parseLogBoxLog(args);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        // Interpolate the message so they are formatted for adb and other CLIs.\n        // This is different than the message.content above because it includes component stacks.\n        const interpolated = parseInterpolation(args);\n        originalConsoleError?.(interpolated.message.content);\n\n        LogBoxData.addLog({\n          // Always show the static rendering issues as full screen since they\n          // are too confusing otherwise.\n          level: /did not match\\. Server:/.test(message.content) ? 'fatal' : 'error',\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {},\n    uninstall(): void {},\n    isInstalled(): boolean {\n      return false;\n    },\n    ignoreLogs(_patterns: readonly IgnorePattern[]): void {},\n    ignoreAllLogs(_value?: boolean): void {},\n    clearAllLogs(): void {},\n    addLog(_log: LogData): void {},\n    addException(_ex: ExtendedExceptionData): void {},\n  };\n}\n\nexport default LogBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}