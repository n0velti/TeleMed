{"ast":null,"code":"\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNavigation = useNavigation;\nconst native_1 = require(\"@react-navigation/native\");\nconst utils_1 = require(\"./global-state/utils\");\nconst href_1 = require(\"./link/href\");\nfunction useNavigation(parent) {\n  const rnNavigation = (0, native_1.useNavigation)();\n  let navigation = rnNavigation;\n  let state = (0, native_1.useStateForPath)();\n  if (parent === undefined) {\n    return navigation;\n  }\n  const currentId = navigation.getId();\n  if (currentId === '' || currentId === `/expo-router/build/views/Navigator`) {\n    return navigation;\n  }\n  if (typeof parent === 'object') {\n    parent = (0, href_1.resolveHref)(parent);\n  }\n  if (parent === '/') {\n    return navigation.getParent(`/expo-router/build/views/Navigator`) ?? navigation.getParent(``);\n  } else if (parent?.startsWith('../')) {\n    const names = [];\n    while (state) {\n      const route = state.routes[0];\n      state = route.state;\n      if (state) {\n        names.push(route.name);\n      }\n    }\n    const originalParent = parent;\n    if (parent.endsWith('/')) {\n      parent = parent.slice(0, -1);\n    }\n    const segments = parent.split('/');\n    if (!segments.every(segment => segment === '..')) {\n      throw new Error(`Invalid parent path \"${originalParent}\". Only \"../\" segments are allowed when using relative paths.`);\n    }\n    const levels = segments.length;\n    const index = names.length - 1 - levels;\n    if (index < 0) {\n      throw new Error(`Invalid parent path \"${originalParent}\". Cannot go up ${levels} levels from the current route.`);\n    }\n    parent = names[index];\n    if (parent && !(0, utils_1.getRootStackRouteNames)().includes(parent)) {\n      parent = `/${parent}`;\n    }\n  }\n  navigation = navigation.getParent(parent);\n  if (process.env.NODE_ENV !== 'production') {\n    if (!navigation) {\n      navigation = rnNavigation;\n      const ids = [];\n      while (navigation) {\n        if (navigation.getId()) ids.push(navigation.getId());\n        navigation = navigation.getParent();\n      }\n      throw new Error(`Could not find parent navigation with route \"${parent}\". Available routes are: '${ids.join(\"', '\")}'`);\n    }\n  }\n  return navigation;\n}","map":{"version":3,"names":["exports","useNavigation","native_1","require","utils_1","href_1","parent","rnNavigation","navigation","state","useStateForPath","undefined","currentId","getId","resolveHref","getParent","startsWith","names","route","routes","push","name","originalParent","endsWith","slice","segments","split","every","segment","Error","levels","length","index","getRootStackRouteNames","includes","process","env","NODE_ENV","ids","join"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/useNavigation.ts"],"sourcesContent":["'use client';\nimport {\n  useNavigation as useUpstreamNavigation,\n  NavigationProp,\n  NavigationState,\n  useStateForPath,\n} from '@react-navigation/native';\n\nimport { getRootStackRouteNames } from './global-state/utils';\nimport { resolveHref } from './link/href';\nimport { Href } from './types';\n\n/**\n * Returns the underlying React Navigation [`navigation` object](https://reactnavigation.org/docs/navigation-object)\n * to imperatively access layout-specific functionality like `navigation.openDrawer()` in a\n * [Drawer](/router/advanced/drawer/) layout.\n *\n * @example\n * ```tsx app/index.tsx\n * import { useNavigation } from 'expo-router';\n *\n * export default function Route() {\n *   // Access the current navigation object for the current route.\n *   const navigation = useNavigation();\n *\n *   return (\n *     <View>\n *       <Text onPress={() => {\n *         // Open the drawer view.\n *         navigation.openDrawer();\n *       }}>\n *         Open Drawer\n *       </Text>\n *     </View>\n *   );\n * }\n * ```\n *\n * When using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route.\n * For example, `/menu/_layout.tsx` is nested inside `/app/orders/`, you can use `useNavigation('/orders/menu/')`.\n *\n * @example\n * ```tsx app/orders/menu/index.tsx\n * import { useNavigation } from 'expo-router';\n *\n * export default function MenuRoute() {\n *   const rootLayout = useNavigation('/');\n *   const ordersLayout = useNavigation('/orders');\n *\n *   // Same as the default results of `useNavigation()` when invoked in this route.\n *   const parentLayout = useNavigation('/orders/menu');\n * }\n * ```\n *\n * If you attempt to access a layout that doesn't exist, an error such as\n * `Could not find parent navigation with route \"/non-existent\"` is thrown.\n *\n *\n * @param parent Provide an absolute path such as `/(root)` to the parent route or a relative path like `../../` to the parent route.\n * @returns The navigation object for the current route.\n *\n * @see React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-object/#navigator-dependent-functions)\n * for more information.\n */\nexport function useNavigation<\n  T = Omit<NavigationProp<ReactNavigation.RootParamList>, 'getState'> & {\n    getState(): NavigationState | undefined;\n  },\n>(parent?: string | Href): T {\n  const rnNavigation = useUpstreamNavigation<any>();\n  let navigation = rnNavigation;\n  let state = useStateForPath();\n\n  if (parent === undefined) {\n    // If no parent is provided, return the current navigation object\n    return navigation;\n  }\n\n  // Check for the top-level navigator - we cannot fetch anything higher!\n  const currentId = navigation.getId();\n  if (currentId === '' || currentId === `/expo-router/build/views/Navigator`) {\n    return navigation;\n  }\n\n  if (typeof parent === 'object') {\n    parent = resolveHref(parent);\n  }\n\n  if (parent === '/') {\n    // This is the root navigator\n    return navigation.getParent(`/expo-router/build/views/Navigator`) ?? navigation.getParent(``);\n  } else if (parent?.startsWith('../')) {\n    const names: string[] = [];\n\n    while (state) {\n      const route = state.routes[0];\n      state = route.state;\n      // Don't include the last router, as thats the current route\n      if (state) {\n        names.push(route.name);\n      }\n    }\n\n    // Removing the trailing slash to make splitting easier\n    const originalParent = parent;\n    if (parent.endsWith('/')) {\n      parent = parent.slice(0, -1);\n    }\n\n    const segments = parent.split('/');\n    if (!segments.every((segment) => segment === '..')) {\n      throw new Error(\n        `Invalid parent path \"${originalParent}\". Only \"../\" segments are allowed when using relative paths.`\n      );\n    }\n\n    const levels = segments.length;\n    const index = names.length - 1 - levels;\n\n    if (index < 0) {\n      throw new Error(\n        `Invalid parent path \"${originalParent}\". Cannot go up ${levels} levels from the current route.`\n      );\n    }\n\n    parent = names[index];\n\n    // Expo Router navigators use the context key as the name which has a leading `/`\n    // The exception to this are the root stack routes, and the root navigator which uses ''\n    if (parent && !getRootStackRouteNames().includes(parent)) {\n      parent = `/${parent}`;\n    }\n  }\n\n  navigation = navigation.getParent(parent);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!navigation) {\n      navigation = rnNavigation;\n      const ids: (string | undefined)[] = [];\n      while (navigation) {\n        if (navigation.getId()) ids.push(navigation.getId());\n        navigation = navigation.getParent();\n      }\n\n      throw new Error(\n        `Could not find parent navigation with route \"${parent}\". Available routes are: '${ids.join(\"', '\")}'`\n      );\n    }\n  }\n\n  return navigation;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}