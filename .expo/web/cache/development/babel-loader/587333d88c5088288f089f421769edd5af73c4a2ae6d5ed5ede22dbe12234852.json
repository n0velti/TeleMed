{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyRedirects = applyRedirects;\nexports.getRedirectModule = getRedirectModule;\nexports.convertRedirect = convertRedirect;\nexports.mergeVariablesWithPath = mergeVariablesWithPath;\nconst Linking = __importStar(require(\"expo-linking\"));\nconst react_1 = require(\"react\");\nconst getStateFromPath_forks_1 = require(\"./fork/getStateFromPath-forks\");\nconst matchers_1 = require(\"./matchers\");\nconst url_1 = require(\"./utils/url\");\nfunction applyRedirects(url, redirects) {\n  if (typeof url !== 'string' || !redirects) {\n    return url;\n  }\n  const nextUrl = (0, getStateFromPath_forks_1.cleanPath)(url);\n  const redirect = redirects.find(([regex]) => regex.test(nextUrl));\n  if (!redirect) {\n    return url;\n  }\n  if (redirect[2]) {\n    let href = redirect[1].destination;\n    if (href.startsWith('//') && false) {\n      href = `https:${href}`;\n    }\n    Linking.openURL(href);\n    return href;\n  }\n  return applyRedirects(convertRedirect(url, redirect[1]), redirects);\n}\nfunction getRedirectModule(redirectConfig) {\n  var _s = $RefreshSig$();\n  return {\n    default: _s(function RedirectComponent() {\n      _s();\n      const pathname = require('./hooks').usePathname();\n      const isExternal = (0, url_1.shouldLinkExternally)(redirectConfig.destination);\n      (0, react_1.useEffect)(() => {\n        if (isExternal) {\n          let href = redirectConfig.destination;\n          if (href.startsWith('//') && false) {\n            href = `https:${href}`;\n          }\n          Linking.openURL(href);\n        }\n      }, []);\n      if (isExternal) {\n        return null;\n      }\n      const href = convertRedirect(pathname, redirectConfig);\n      return (0, react_1.createElement)(require('./link/Link').Redirect, {\n        href\n      });\n    }, \"xbyQPtUVMO7MNj7WjJlpdWqRcTo=\", true)\n  };\n}\nfunction convertRedirect(path, config) {\n  const params = {};\n  const parts = path.split('/');\n  const sourceParts = config.source.split('/');\n  for (const [index, sourcePart] of sourceParts.entries()) {\n    const dynamicName = (0, matchers_1.matchDynamicName)(sourcePart);\n    if (!dynamicName) {\n      continue;\n    } else if (!dynamicName.deep) {\n      params[dynamicName.name] = parts[index];\n      continue;\n    } else {\n      params[dynamicName.name] = parts.slice(index);\n      break;\n    }\n  }\n  return mergeVariablesWithPath(config.destination, params);\n}\nfunction mergeVariablesWithPath(path, params) {\n  return path.split('/').map(part => {\n    const dynamicName = (0, matchers_1.matchDynamicName)(part);\n    if (!dynamicName) {\n      return part;\n    } else {\n      const param = params[dynamicName.name];\n      delete params[dynamicName.name];\n      return param;\n    }\n  }).filter(Boolean).join('/');\n}","map":{"version":3,"names":["exports","applyRedirects","getRedirectModule","convertRedirect","mergeVariablesWithPath","Linking","__importStar","require","react_1","getStateFromPath_forks_1","matchers_1","url_1","url","redirects","nextUrl","cleanPath","redirect","find","regex","test","href","destination","startsWith","openURL","redirectConfig","_s","$RefreshSig$","default","RedirectComponent","pathname","usePathname","isExternal","shouldLinkExternally","useEffect","createElement","Redirect","path","config","params","parts","split","sourceParts","source","index","sourcePart","entries","dynamicName","matchDynamicName","deep","name","slice","map","part","param","filter","Boolean","join"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/getRoutesRedirects.tsx"],"sourcesContent":["import * as Linking from 'expo-linking';\nimport { createElement, useEffect } from 'react';\n\nimport { cleanPath } from './fork/getStateFromPath-forks';\nimport { RedirectConfig } from './getRoutesCore';\nimport type { StoreRedirects } from './global-state/router-store';\nimport { matchDynamicName } from './matchers';\nimport { shouldLinkExternally } from './utils/url';\n\nexport function applyRedirects(\n  url: string | null | undefined,\n  redirects: StoreRedirects[] | undefined\n): string | undefined | null {\n  if (typeof url !== 'string' || !redirects) {\n    return url;\n  }\n\n  const nextUrl = cleanPath(url);\n  const redirect = redirects.find(([regex]) => regex.test(nextUrl));\n\n  if (!redirect) {\n    return url;\n  }\n\n  // If the redirect is external, open the URL\n  if (redirect[2]) {\n    let href = redirect[1].destination;\n\n    if (href.startsWith('//') && process.env.EXPO_OS !== 'web') {\n      href = `https:${href}`;\n    }\n\n    Linking.openURL(href);\n    return href;\n  }\n\n  return applyRedirects(convertRedirect(url, redirect[1]), redirects);\n}\n\nexport function getRedirectModule(redirectConfig: RedirectConfig) {\n  return {\n    default: function RedirectComponent() {\n      const pathname = require('./hooks').usePathname();\n\n      const isExternal = shouldLinkExternally(redirectConfig.destination);\n\n      useEffect(() => {\n        if (isExternal) {\n          let href = redirectConfig.destination;\n          if (href.startsWith('//') && process.env.EXPO_OS !== 'web') {\n            href = `https:${href}`;\n          }\n\n          Linking.openURL(href);\n        }\n      }, []);\n\n      if (isExternal) {\n        return null;\n      }\n\n      const href = convertRedirect(pathname, redirectConfig);\n\n      return createElement(require('./link/Link').Redirect, {\n        href,\n      });\n    },\n  };\n}\n\nexport function convertRedirect(path: string, config: RedirectConfig) {\n  const params: Record<string, string | string[]> = {};\n\n  const parts = path.split('/');\n  const sourceParts = config.source.split('/');\n\n  for (const [index, sourcePart] of sourceParts.entries()) {\n    const dynamicName = matchDynamicName(sourcePart);\n    if (!dynamicName) {\n      continue;\n    } else if (!dynamicName.deep) {\n      params[dynamicName.name] = parts[index];\n      continue;\n    } else {\n      params[dynamicName.name] = parts.slice(index);\n      break;\n    }\n  }\n\n  return mergeVariablesWithPath(config.destination, params);\n}\n\nexport function mergeVariablesWithPath(path: string, params: Record<string, string | string[]>) {\n  return path\n    .split('/')\n    .map((part) => {\n      const dynamicName = matchDynamicName(part);\n      if (!dynamicName) {\n        return part;\n      } else {\n        const param = params[dynamicName.name];\n        delete params[dynamicName.name];\n        return param;\n      }\n    })\n    .filter(Boolean)\n    .join('/');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}