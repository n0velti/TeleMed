{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePathAndParamsFromExpoGoLink = parsePathAndParamsFromExpoGoLink;\nexports.parsePathFromExpoGoLink = parsePathFromExpoGoLink;\nexports.extractExpoPathFromURL = extractExpoPathFromURL;\nfunction parsePathAndParamsFromExpoGoLink(url) {\n  const href = parsePathFromExpoGoLink(url);\n  const results = href.match(/([^?]*)(\\?.*)?/);\n  return {\n    pathname: results?.[1] ?? '',\n    queryString: results?.[2] ?? ''\n  };\n}\nfunction parsePathFromExpoGoLink(url) {\n  return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n}\nfunction extractExactPathFromURL(url) {\n  if (url.match(/^https?:\\/\\//)) {\n    const {\n      origin,\n      href,\n      hostname\n    } = new URL(url);\n    if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n      return '';\n    }\n    return href.replace(origin, '');\n  }\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n  if (isExpoGo && url.match(/^exp(s)?:\\/\\//)) {\n    const pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n    return '';\n  }\n  return fromDeepLink(url);\n}\nfunction isExpoDevelopmentClient(url) {\n  return url.hostname === 'expo-development-client';\n}\nfunction fromDeepLink(url) {\n  let res;\n  try {\n    res = new URL(url);\n  } catch {\n    if (url.startsWith('/')) {\n      return url;\n    }\n    return url.replace(/^[^:]+:\\/\\//, '');\n  }\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url');\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n  let results = '';\n  if (res.host) {\n    results += res.host;\n  }\n  if (res.pathname) {\n    results += res.pathname;\n  }\n  const qs = !res.search ? '' : [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n  if (qs) {\n    results += '?' + qs;\n  }\n  return results;\n}\nfunction extractExpoPathFromURL(_prefixes, url = '') {\n  return extractExactPathFromURL(url).replace(/^\\//, '');\n}","map":{"version":3,"names":["exports","parsePathAndParamsFromExpoGoLink","parsePathFromExpoGoLink","extractExpoPathFromURL","url","href","results","match","pathname","queryString","extractExactPathFromURL","origin","hostname","URL","replace","isExpoGo","expo","globalThis","modules","ExpoGo","fromDeepLink","queryParams","isExpoDevelopmentClient","res","startsWith","searchParams","get","incomingUrl","decodeURI","host","qs","search","entries","map","k","v","decodeURIComponent","join","_prefixes"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/fork/extractPathFromURL.ts"],"sourcesContent":["export function parsePathAndParamsFromExpoGoLink(url: string): {\n  pathname: string;\n  queryString: string;\n} {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n\n  const href = parsePathFromExpoGoLink(url);\n  const results = href.match(/([^?]*)(\\?.*)?/);\n  return {\n    pathname: results?.[1] ?? '',\n    queryString: results?.[2] ?? '',\n  };\n}\n\nexport function parsePathFromExpoGoLink(url: string): string {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n}\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href, hostname } = new URL(url);\n\n    if (hostname === 'exp.host' || hostname === 'u.expo.dev') {\n      // These are QR code generate deep-link that always like to the '/' path\n      // TODO: In the future, QR code may link to a specific path and this logic will need to be udpated\n      return '';\n    }\n\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    // Match the `?.*` segment of the URL.\n    const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n\n    return '';\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL | null;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    /**\n     * We failed to parse the URL. This can occur for a variety of reasons, including:\n     * - Its a partial URL (e.g. `/route?query=param`).\n     * - It has a valid App scheme, but the scheme isn't a valid URL scheme (e.g. `my_app://`)\n     */\n\n    // If `url` is already a path (starts with `/`), return it as-is\n    if (url.startsWith('/')) {\n      return url;\n    }\n\n    /**\n     * App schemes are not valid URL schemes, so they will fail to parse.\n     * We need to strip the scheme from these URLs\n     */\n    return url.replace(/^[^:]+:\\/\\//, '');\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(_prefixes: string[], url: string = '') {\n  return (\n    extractExactPathFromURL(url)\n      // TODO: We should get rid of this, dropping specificities is not good\n      .replace(/^\\//, '')\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}