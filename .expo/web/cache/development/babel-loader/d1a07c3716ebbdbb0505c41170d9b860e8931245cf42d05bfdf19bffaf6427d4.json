{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathFromState = exports.getStateFromPath = void 0;\nexports.getInitialURL = getInitialURL;\nexports.getRootURL = getRootURL;\nexports.subscribe = subscribe;\nconst Linking = __importStar(require(\"expo-linking\"));\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst extractPathFromURL_1 = require(\"../fork/extractPathFromURL\");\nconst getPathFromState_1 = require(\"../fork/getPathFromState\");\nObject.defineProperty(exports, \"getPathFromState\", {\n  enumerable: true,\n  get: function () {\n    return getPathFromState_1.getPathFromState;\n  }\n});\nconst getStateFromPath_1 = require(\"../fork/getStateFromPath\");\nObject.defineProperty(exports, \"getStateFromPath\", {\n  enumerable: true,\n  get: function () {\n    return getStateFromPath_1.getStateFromPath;\n  }\n});\nconst useLinking_1 = require(\"../fork/useLinking\");\nconst getRoutesRedirects_1 = require(\"../getRoutesRedirects\");\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\nfunction getInitialURL() {\n  if (typeof window === 'undefined') {\n    return '';\n  }\n  if (react_native_1.Platform.OS === 'web' && window.location?.href) {\n    return window.location.href;\n  }\n  if (react_native_1.Platform.OS === 'ios') {\n    const url = Linking.getLinkingURL();\n    return parseExpoGoUrlFromListener(url) ?? getRootURL();\n  }\n  return Promise.resolve((0, useLinking_1.getInitialURLWithTimeout)()).then(url => parseExpoGoUrlFromListener(url) ?? getRootURL());\n}\nlet _rootURL;\nfunction getRootURL() {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n    if (isExpoGo) {\n      _rootURL = (0, extractPathFromURL_1.parsePathFromExpoGoLink)(_rootURL);\n    }\n  }\n  return _rootURL;\n}\nfunction parseExpoGoUrlFromListener(url) {\n  if (!url || !isExpoGo) {\n    return url;\n  }\n  const {\n    pathname,\n    queryString\n  } = (0, extractPathFromURL_1.parsePathAndParamsFromExpoGoLink)(url);\n  if (!pathname || pathname === '/') {\n    return getRootURL() + queryString;\n  }\n  return url;\n}\nfunction subscribe(nativeLinking, redirects) {\n  return listener => {\n    let callback;\n    const legacySubscription = nativeLinking?.legacy_subscribe?.(listener);\n    if (isExpoGo) {\n      callback = async ({\n        url\n      }) => {\n        let href = parseExpoGoUrlFromListener(url);\n        href = (0, getRoutesRedirects_1.applyRedirects)(href, redirects);\n        if (href && nativeLinking?.redirectSystemPath) {\n          href = await nativeLinking.redirectSystemPath({\n            path: href,\n            initial: false\n          });\n        }\n        if (href) {\n          listener(href);\n        }\n      };\n    } else {\n      callback = async ({\n        url\n      }) => {\n        let href = (0, getRoutesRedirects_1.applyRedirects)(url, redirects);\n        if (href && nativeLinking?.redirectSystemPath) {\n          href = await nativeLinking.redirectSystemPath({\n            path: href,\n            initial: false\n          });\n        }\n        if (href) {\n          listener(href);\n        }\n      };\n    }\n    const subscription = Linking.addEventListener('url', callback);\n    return () => {\n      subscription?.remove?.();\n      legacySubscription?.();\n    };\n  };\n}","map":{"version":3,"names":["exports","getInitialURL","getRootURL","subscribe","Linking","__importStar","require","react_native_1","extractPathFromURL_1","getPathFromState_1","Object","defineProperty","enumerable","get","getPathFromState","getStateFromPath_1","getStateFromPath","useLinking_1","getRoutesRedirects_1","isExpoGo","expo","globalThis","modules","ExpoGo","window","Platform","OS","location","href","url","getLinkingURL","parseExpoGoUrlFromListener","Promise","resolve","getInitialURLWithTimeout","then","_rootURL","undefined","createURL","parsePathFromExpoGoLink","pathname","queryString","parsePathAndParamsFromExpoGoLink","nativeLinking","redirects","listener","callback","legacySubscription","legacy_subscribe","applyRedirects","redirectSystemPath","path","initial","subscription","addEventListener","remove"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'react-native';\n\nimport {\n  parsePathAndParamsFromExpoGoLink,\n  parsePathFromExpoGoLink,\n} from '../fork/extractPathFromURL';\nimport { getPathFromState } from '../fork/getPathFromState';\nimport { getStateFromPath } from '../fork/getStateFromPath';\nimport { getInitialURLWithTimeout } from '../fork/useLinking';\nimport { applyRedirects } from '../getRoutesRedirects';\nimport { StoreRedirects } from '../global-state/router-store';\nimport { NativeIntent } from '../types';\n\nconst isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport function getInitialURL(): ReturnType<\n  NonNullable<LinkingOptions<Record<string, unknown>>['getInitialURL']>\n> {\n  if (typeof window === 'undefined') {\n    return '';\n  }\n  if (Platform.OS === 'web' && window.location?.href) {\n    return window.location.href;\n  }\n  if (Platform.OS === 'ios') {\n    // Use the new Expo API for iOS. This has better support for App Clips and handoff.\n    const url = Linking.getLinkingURL();\n    return (\n      parseExpoGoUrlFromListener(url) ??\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      getRootURL()\n    );\n  }\n\n  // TODO: Figure out if expo-linking on Android has full interop with the React Native implementation.\n  return Promise.resolve(getInitialURLWithTimeout()).then(\n    (url) =>\n      parseExpoGoUrlFromListener(url) ??\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      getRootURL()\n  );\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n    if (isExpoGo) {\n      _rootURL = parsePathFromExpoGoLink(_rootURL);\n    }\n  }\n  return _rootURL;\n}\n\n// Expo Go is weird and requires the root path to be `/--/`\nfunction parseExpoGoUrlFromListener<T extends string | null>(url: T): T {\n  if (!url || !isExpoGo) {\n    return url;\n  }\n  const { pathname, queryString } = parsePathAndParamsFromExpoGoLink(url);\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  if (!pathname || pathname === '/') {\n    return (getRootURL() + queryString) as T;\n  }\n  return url;\n}\n\nexport function subscribe(\n  nativeLinking: NativeIntent | undefined,\n  redirects: StoreRedirects[] | undefined\n) {\n  return (listener: (url: string) => void) => {\n    let callback: (({ url }: { url: string }) => void) | undefined;\n\n    const legacySubscription = nativeLinking?.legacy_subscribe?.(listener);\n\n    if (isExpoGo) {\n      // This extra work is only done in the Expo Go app.\n      callback = async ({ url }) => {\n        let href: string | undefined | null = parseExpoGoUrlFromListener(url);\n        href = applyRedirects(href, redirects);\n        if (href && nativeLinking?.redirectSystemPath) {\n          href = await nativeLinking.redirectSystemPath({ path: href, initial: false });\n        }\n\n        if (href) {\n          listener(href);\n        }\n      };\n    } else {\n      callback = async ({ url }) => {\n        let href = applyRedirects(url, redirects);\n        if (href && nativeLinking?.redirectSystemPath) {\n          href = await nativeLinking.redirectSystemPath({ path: href, initial: false });\n        }\n\n        if (href) {\n          listener(href);\n        }\n      };\n    }\n\n    const subscription = Linking.addEventListener('url', callback);\n\n    return () => {\n      // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n      subscription?.remove?.();\n      legacySubscription?.();\n    };\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}