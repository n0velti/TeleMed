{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchDynamicName = matchDynamicName;\nexports.testNotFound = testNotFound;\nexports.matchGroupName = matchGroupName;\nexports.matchLastGroupName = matchLastGroupName;\nexports.matchArrayGroupName = matchArrayGroupName;\nexports.getNameFromFilePath = getNameFromFilePath;\nexports.getContextKey = getContextKey;\nexports.removeSupportedExtensions = removeSupportedExtensions;\nexports.removeFileSystemExtensions = removeFileSystemExtensions;\nexports.removeFileSystemDots = removeFileSystemDots;\nexports.stripGroupSegmentsFromPath = stripGroupSegmentsFromPath;\nexports.stripInvisibleSegmentsFromPath = stripInvisibleSegmentsFromPath;\nexports.isTypedRoute = isTypedRoute;\nconst dynamicNameRe = /^\\[([^[\\]]+?)\\]$/;\nfunction matchDynamicName(name) {\n  const paramName = name.match(dynamicNameRe)?.[1];\n  if (paramName == null) {\n    return undefined;\n  } else if (paramName.startsWith('...')) {\n    return {\n      name: paramName.slice(3),\n      deep: true\n    };\n  } else {\n    return {\n      name: paramName,\n      deep: false\n    };\n  }\n}\nfunction testNotFound(name) {\n  return /\\+not-found$/.test(name);\n}\nfunction matchGroupName(name) {\n  return name.match(/^(?:[^\\\\()])*?\\(([^\\\\/]+)\\)/)?.[1];\n}\nfunction matchLastGroupName(name) {\n  return name.match(/.*(?:\\/|^)\\(([^\\\\/]+)\\)[^\\s]*$/)?.[1];\n}\nfunction matchArrayGroupName(name) {\n  return name.match(/(?:[^\\\\()])*?\\(([^\\\\/]+,[^\\\\/]+)\\)/)?.[1];\n}\nfunction getNameFromFilePath(name) {\n  return removeSupportedExtensions(removeFileSystemDots(name));\n}\nfunction getContextKey(name) {\n  const normal = '/' + getNameFromFilePath(name);\n  if (!normal.endsWith('_layout')) {\n    return normal;\n  }\n  return normal.replace(/\\/?_layout$/, '');\n}\nfunction removeSupportedExtensions(name) {\n  return name.replace(/(\\+api)?\\.[jt]sx?$/g, '');\n}\nfunction removeFileSystemExtensions(name) {\n  return name.replace(/\\.[jt]sx?$/g, '');\n}\nfunction removeFileSystemDots(filePath) {\n  return filePath.replace(/^(?:\\.\\.?\\/)+/g, '');\n}\nfunction stripGroupSegmentsFromPath(path) {\n  return path.split('/').reduce((acc, v) => {\n    if (matchGroupName(v) == null) {\n      acc.push(v);\n    }\n    return acc;\n  }, []).join('/');\n}\nfunction stripInvisibleSegmentsFromPath(path) {\n  return stripGroupSegmentsFromPath(path).replace(/\\/?index$/, '');\n}\nfunction isTypedRoute(name) {\n  return !name.startsWith('+') && name.match(/(_layout|[^/]*?\\+[^/]*?)\\.[tj]sx?$/) === null;\n}","map":{"version":3,"names":["exports","matchDynamicName","testNotFound","matchGroupName","matchLastGroupName","matchArrayGroupName","getNameFromFilePath","getContextKey","removeSupportedExtensions","removeFileSystemExtensions","removeFileSystemDots","stripGroupSegmentsFromPath","stripInvisibleSegmentsFromPath","isTypedRoute","dynamicNameRe","name","paramName","match","undefined","startsWith","slice","deep","test","normal","endsWith","replace","filePath","path","split","reduce","acc","v","push","join"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/matchers.tsx"],"sourcesContent":["/** Match `[page]` -> `page` or `[...group]` -> `...group` */\nconst dynamicNameRe = /^\\[([^[\\]]+?)\\]$/;\n\ninterface DynamicNameMatch {\n  name: string;\n  deep: boolean;\n}\n\n/** Match `[page]` -> `page` */\nexport function matchDynamicName(name: string): DynamicNameMatch | undefined {\n  const paramName = name.match(dynamicNameRe)?.[1];\n  if (paramName == null) {\n    return undefined;\n  } else if (paramName.startsWith('...')) {\n    return { name: paramName.slice(3), deep: true };\n  } else {\n    return { name: paramName, deep: false };\n  }\n}\n\n/** Test `/` -> `page` */\nexport function testNotFound(name: string): boolean {\n  return /\\+not-found$/.test(name);\n}\n\n/** Match `(page)` -> `page` */\nexport function matchGroupName(name: string): string | undefined {\n  return name.match(/^(?:[^\\\\()])*?\\(([^\\\\/]+)\\)/)?.[1];\n}\n\n/** Match `(app)/(page)` -> `page` */\nexport function matchLastGroupName(name: string): string | undefined {\n  return name.match(/.*(?:\\/|^)\\(([^\\\\/]+)\\)[^\\s]*$/)?.[1];\n}\n\n/** Match the first array group name `(a,b,c)/(d,c)` -> `'a,b,c'` */\nexport function matchArrayGroupName(name: string) {\n  return name.match(/(?:[^\\\\()])*?\\(([^\\\\/]+,[^\\\\/]+)\\)/)?.[1];\n}\n\nexport function getNameFromFilePath(name: string): string {\n  return removeSupportedExtensions(removeFileSystemDots(name));\n}\n\nexport function getContextKey(name: string): string {\n  // The root path is `` (empty string) so always prepend `/` to ensure\n  // there is some value.\n  const normal = '/' + getNameFromFilePath(name);\n  if (!normal.endsWith('_layout')) {\n    return normal;\n  }\n  return normal.replace(/\\/?_layout$/, '');\n}\n\n/** Remove `.js`, `.ts`, `.jsx`, `.tsx`, and the +api suffix */\nexport function removeSupportedExtensions(name: string): string {\n  return name.replace(/(\\+api)?\\.[jt]sx?$/g, '');\n}\n\n/** Remove `.js`, `.ts`, `.jsx`, `.tsx` */\nexport function removeFileSystemExtensions(name: string): string {\n  return name.replace(/\\.[jt]sx?$/g, '');\n}\n\n// Remove any amount of `./` and `../` from the start of the string\nexport function removeFileSystemDots(filePath: string): string {\n  return filePath.replace(/^(?:\\.\\.?\\/)+/g, '');\n}\n\nexport function stripGroupSegmentsFromPath(path: string): string {\n  return path\n    .split('/')\n    .reduce((acc, v) => {\n      if (matchGroupName(v) == null) {\n        acc.push(v);\n      }\n      return acc;\n    }, [] as string[])\n    .join('/');\n}\n\nexport function stripInvisibleSegmentsFromPath(path: string): string {\n  return stripGroupSegmentsFromPath(path).replace(/\\/?index$/, '');\n}\n\n/**\n * Match:\n *  - _layout files, +html, +not-found, string+api, etc\n *  - Routes can still use `+`, but it cannot be in the last segment.\n */\nexport function isTypedRoute(name: string) {\n  return !name.startsWith('+') && name.match(/(_layout|[^/]*?\\+[^/]*?)\\.[tj]sx?$/) === null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}