{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"href\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useLinkToPathProps;\nexports.shouldHandleMouseEvent = shouldHandleMouseEvent;\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst emitDomEvent_1 = require(\"../domComponents/emitDomEvent\");\nconst getPathFromState_forks_1 = require(\"../fork/getPathFromState-forks\");\nconst routing_1 = require(\"../global-state/routing\");\nconst matchers_1 = require(\"../matchers\");\nconst url_1 = require(\"../utils/url\");\nfunction eventShouldPreventDefault(e) {\n  if (e?.defaultPrevented) {\n    return false;\n  }\n  if ('button' in e && !e.metaKey && !e.altKey && !e.ctrlKey && !e.shiftKey && (e.button == null || e.button === 0) && [undefined, null, '', 'self'].includes(e.currentTarget.target)) {\n    return true;\n  }\n  return false;\n}\nfunction useLinkToPathProps(_ref) {\n  let {\n      href\n    } = _ref,\n    options = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const onPress = event => {\n    if (shouldHandleMouseEvent(event)) {\n      if ((0, emitDomEvent_1.emitDomLinkEvent)(href, options)) {\n        return;\n      }\n      (0, routing_1.linkTo)(href, options);\n    }\n  };\n  let strippedHref = (0, matchers_1.stripGroupSegmentsFromPath)(href) || '/';\n  if (!(0, url_1.shouldLinkExternally)(strippedHref)) {\n    strippedHref = (0, getPathFromState_forks_1.appendBaseUrl)(strippedHref);\n  }\n  return {\n    href: strippedHref,\n    role: 'link',\n    onPress\n  };\n}\nfunction shouldHandleMouseEvent(event) {\n  if (react_native_1.Platform.OS !== 'web') {\n    return !event?.defaultPrevented;\n  }\n  if (event && eventShouldPreventDefault(event)) {\n    event.preventDefault();\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["exports","default","useLinkToPathProps","shouldHandleMouseEvent","react_native_1","require","emitDomEvent_1","getPathFromState_forks_1","routing_1","matchers_1","url_1","eventShouldPreventDefault","e","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","undefined","includes","currentTarget","target","_ref","href","options","_objectWithoutPropertiesLoose","_excluded","onPress","event","emitDomLinkEvent","linkTo","strippedHref","stripGroupSegmentsFromPath","shouldLinkExternally","appendBaseUrl","role","Platform","OS","preventDefault"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/link/useLinkToPathProps.tsx"],"sourcesContent":["import { MouseEvent } from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport { emitDomLinkEvent } from '../domComponents/emitDomEvent';\nimport { appendBaseUrl } from '../fork/getPathFromState-forks';\nimport { linkTo, LinkToOptions } from '../global-state/routing';\nimport { stripGroupSegmentsFromPath } from '../matchers';\nimport { shouldLinkExternally } from '../utils/url';\n\nfunction eventShouldPreventDefault(\n  e: MouseEvent<HTMLAnchorElement> | GestureResponderEvent\n): boolean {\n  if (e?.defaultPrevented) {\n    return false;\n  }\n\n  if (\n    // Only check MouseEvents\n    'button' in e &&\n    // ignore clicks with modifier keys\n    !e.metaKey &&\n    !e.altKey &&\n    !e.ctrlKey &&\n    !e.shiftKey &&\n    (e.button == null || e.button === 0) && // Only accept left clicks\n    [undefined, null, '', 'self'].includes(e.currentTarget.target) // let browser handle \"target=_blank\" etc.\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\ntype UseLinkToPathPropsOptions = LinkToOptions & {\n  href: string;\n};\n\nexport default function useLinkToPathProps({ href, ...options }: UseLinkToPathPropsOptions) {\n  const onPress = (event?: MouseEvent<HTMLAnchorElement> | GestureResponderEvent) => {\n    if (shouldHandleMouseEvent(event)) {\n      if (emitDomLinkEvent(href, options)) {\n        return;\n      }\n      linkTo(href, options);\n    }\n  };\n\n  let strippedHref = stripGroupSegmentsFromPath(href) || '/';\n\n  // Append base url only if needed.\n  if (!shouldLinkExternally(strippedHref)) {\n    strippedHref = appendBaseUrl(strippedHref);\n  }\n\n  return {\n    href: strippedHref,\n    role: 'link' as const,\n    onPress,\n  };\n}\n\nexport function shouldHandleMouseEvent(\n  event?: MouseEvent<HTMLAnchorElement> | GestureResponderEvent\n) {\n  if (Platform.OS !== 'web') {\n    return !event?.defaultPrevented;\n  }\n\n  if (event && eventShouldPreventDefault(event)) {\n    event.preventDefault();\n    return true;\n  }\n\n  return false;\n}\n"],"mappings":";;;;;;;AAqCAA,OAAA,CAAAC,OAAA,GAAAC,kBAAA;AAwBAF,OAAA,CAAAG,sBAAA,GAAAA,sBAAA;AAaC,MAAAC,cAAA,GAAAC,OAAA;AAvED,MAAAC,cAAA,GAAAD,OAAA;AACA,MAAAE,wBAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AACA,MAAAK,KAAA,GAAAL,OAAA;AAEA,SAASM,yBAAyBA,CAChCC,CAAwD;EAExD,IAAIA,CAAC,EAAEC,gBAAgB,EAAE;IACvB,OAAO,KAAK;EACd;EAEA,IAEE,QAAQ,IAAID,CAAC,IAEb,CAACA,CAAC,CAACE,OAAO,IACV,CAACF,CAAC,CAACG,MAAM,IACT,CAACH,CAAC,CAACI,OAAO,IACV,CAACJ,CAAC,CAACK,QAAQ,KACVL,CAAC,CAACM,MAAM,IAAI,IAAI,IAAIN,CAAC,CAACM,MAAM,KAAK,CAAC,CAAC,IACpC,CAACC,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACR,CAAC,CAACS,aAAa,CAACC,MAAM,CAAC,EAC9D;IACA,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd;AAMA,SAAwBpB,kBAAkBA,CAAAqB,IAAA,EAAgD;EAAA,IAA/C;MAAEC;IAAgB,CAA6B,GAAAD,IAAA;IAApCE,OAAO,GAAAC,6BAAA,CAAAH,IAAA,EAAAI,SAAA;EAC3D,MAAMC,OAAO,GAAIC,KAA6D,IAAI;IAChF,IAAI1B,sBAAsB,CAAC0B,KAAK,CAAC,EAAE;MACjC,IAAI,IAAAvB,cAAA,CAAAwB,gBAAgB,EAACN,IAAI,EAAEC,OAAO,CAAC,EAAE;QACnC;MACF;MACA,IAAAjB,SAAA,CAAAuB,MAAM,EAACP,IAAI,EAAEC,OAAO,CAAC;IACvB;EACF,CAAC;EAED,IAAIO,YAAY,GAAG,IAAAvB,UAAA,CAAAwB,0BAA0B,EAACT,IAAI,CAAC,IAAI,GAAG;EAG1D,IAAI,CAAC,IAAAd,KAAA,CAAAwB,oBAAoB,EAACF,YAAY,CAAC,EAAE;IACvCA,YAAY,GAAG,IAAAzB,wBAAA,CAAA4B,aAAa,EAACH,YAAY,CAAC;EAC5C;EAEA,OAAO;IACLR,IAAI,EAAEQ,YAAY;IAClBI,IAAI,EAAE,MAAe;IACrBR;GACD;AACH;AAEA,SAAgBzB,sBAAsBA,CACpC0B,KAA6D;EAE7D,IAAIzB,cAAA,CAAAiC,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IACzB,OAAO,CAACT,KAAK,EAAEhB,gBAAgB;EACjC;EAEA,IAAIgB,KAAK,IAAIlB,yBAAyB,CAACkB,KAAK,CAAC,EAAE;IAC7CA,KAAK,CAACU,cAAc,EAAE;IACtB,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}