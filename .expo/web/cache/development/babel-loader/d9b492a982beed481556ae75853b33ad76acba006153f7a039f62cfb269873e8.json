{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"enabled\"],\n  _excluded2 = [\"enabled\", \"active\"];\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nlet Screens;\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\nexport const MaybeScreenContainer = _ref => {\n  let {\n      enabled\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (Screens?.screensEnabled?.()) {\n    return _jsx(Screens.ScreenContainer, Object.assign({\n      enabled: enabled\n    }, rest));\n  }\n  return _jsx(View, Object.assign({}, rest));\n};\n_c = MaybeScreenContainer;\nexport function MaybeScreen(_ref2) {\n  let {\n      enabled,\n      active\n    } = _ref2,\n    rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n  if (Screens?.screensEnabled?.()) {\n    return _jsx(Screens.Screen, Object.assign({\n      enabled: enabled,\n      activityState: active\n    }, rest));\n  }\n  return _jsx(View, Object.assign({}, rest));\n}\n_c2 = MaybeScreen;\nvar _c, _c2;\n$RefreshReg$(_c, \"MaybeScreenContainer\");\n$RefreshReg$(_c2, \"MaybeScreen\");","map":{"version":3,"names":["React","View","jsx","_jsx","Screens","require","e","MaybeScreenContainer","_ref","enabled","rest","_objectWithoutPropertiesLoose","_excluded","screensEnabled","ScreenContainer","Object","assign","_c","MaybeScreen","_ref2","active","_excluded2","Screen","activityState","_c2","$RefreshReg$"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/@react-navigation/bottom-tabs/src/views/ScreenFallback.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  type StyleProp,\n  View,\n  type ViewProps,\n  type ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation<0 | 1>;\n  children: React.ReactNode;\n  freezeOnBlur?: boolean;\n  shouldFreeze: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  hasTwoStates: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens?.screensEnabled?.()) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport function MaybeScreen({ enabled, active, ...rest }: ViewProps & Props) {\n  if (Screens?.screensEnabled?.()) {\n    return (\n      <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n}\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,IAAA;AAOR,SAAAC,GAAA,IAAAC,IAAA;AAWtB,IAAIC,OAA0D;AAE9D,IAAI;EACFA,OAAO,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC3C,CAAC,CAAC,OAAOC,CAAC,EAAE,CACV;AAGF,OAAO,MAAMC,oBAAoB,GAAGC,IAAA,IAO9B;EAAA,IAP+B;MACnCC;IAMF,CAAC,GAAAD,IAAA;IALIE,IAAA,GAAAC,6BAAA,CAAAH,IAAA,EAAAI,SAAA;EAMH,IAAIR,OAAO,EAAES,cAAc,GAAG,CAAC,EAAE;IAC/B,OAAOV,IAAA,CAACC,OAAO,CAACU,eAAe,EAAAC,MAAA,CAAAC,MAAA;MAACP,OAAO,EAAEA;IAAQ,GAAKC,IAAA,CAAO,CAAC;EAChE;EAEA,OAAOP,IAAA,CAACF,IAAI,EAAAc,MAAA,CAAAC,MAAA,KAAKN,IAAA,CAAO,CAAC;AAC3B,CAAC;AAAAO,EAAA,GAbYV,oBAAoB;AAejC,OAAO,SAASW,WAAWA,CAAAC,KAAA,EAAkD;EAAA,IAAjD;MAAEV,OAAO;MAAEW;IAAmC,CAAC,GAAAD,KAAA;IAAzBT,IAAA,GAAAC,6BAAA,CAAAQ,KAAA,EAAAE,UAAA;EAChD,IAAIjB,OAAO,EAAES,cAAc,GAAG,CAAC,EAAE;IAC/B,OACEV,IAAA,CAACC,OAAO,CAACkB,MAAM,EAAAP,MAAA,CAAAC,MAAA;MAACP,OAAO,EAAEA,OAAQ;MAACc,aAAa,EAAEH;IAAO,GAAKV,IAAA,CAAO,CAAC;EAEzE;EAEA,OAAOP,IAAA,CAACF,IAAI,EAAAc,MAAA,CAAAC,MAAA,KAAKN,IAAA,CAAO,CAAC;AAC3B;AAAAc,GAAA,GARgBN,WAAW;AAAA,IAAAD,EAAA,EAAAO,GAAA;AAAAC,YAAA,CAAAR,EAAA;AAAAQ,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}