{"ast":null,"code":"export function createURL(path, {\n  queryParams = {}\n} = {}) {\n  if (typeof window === 'undefined') return '';\n  const url = new URL(path, window.location.origin);\n  Object.entries(queryParams).forEach(([key, value]) => {\n    if (typeof value === 'string') {\n      url.searchParams.set(key, encodeURIComponent(value));\n    } else if (value != null) {\n      url.searchParams.set(key, value);\n    }\n  });\n  return url.toString().replace(/\\/$/, '');\n}\nexport function parse(url) {\n  let parsed;\n  try {\n    parsed = new URL(url);\n  } catch {\n    if (typeof window === 'undefined') {\n      return {\n        hostname: null,\n        path: url,\n        queryParams: {},\n        scheme: null\n      };\n    }\n    return {\n      hostname: 'localhost',\n      path: url,\n      queryParams: {},\n      scheme: 'http'\n    };\n  }\n  const queryParams = {};\n  parsed.searchParams.forEach((value, key) => {\n    queryParams[key] = decodeURIComponent(value);\n  });\n  return {\n    hostname: parsed.hostname || null,\n    path: !parsed.hostname && !parsed.pathname ? null : parsed.pathname === '' ? null : parsed.pathname.replace(/^\\//, ''),\n    queryParams,\n    scheme: parsed.protocol.replace(/:$/, '')\n  };\n}","map":{"version":3,"names":["createURL","path","queryParams","window","url","URL","location","origin","Object","entries","forEach","key","value","searchParams","set","encodeURIComponent","toString","replace","parse","parsed","hostname","scheme","decodeURIComponent","pathname","protocol"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-linking/src/createURL.web.ts"],"sourcesContent":["import { CreateURLOptions, ParsedURL } from './Linking.types';\n\nexport function createURL(path: string, { queryParams = {} }: CreateURLOptions = {}): string {\n  if (typeof window === 'undefined') return '';\n  const url = new URL(path, window.location.origin);\n  Object.entries(queryParams).forEach(([key, value]) => {\n    if (typeof value === 'string') {\n      url.searchParams.set(key, encodeURIComponent(value));\n    } else if (value != null) {\n      url.searchParams.set(\n        key,\n        // @ts-expect-error: browser supports using array\n        value\n      );\n    }\n  });\n  return url.toString().replace(/\\/$/, '');\n}\n\nexport function parse(url: string): ParsedURL {\n  let parsed: URL;\n  try {\n    parsed = new URL(url);\n  } catch {\n    if (typeof window === 'undefined') {\n      return {\n        hostname: null,\n        path: url,\n        queryParams: {},\n        scheme: null,\n      };\n    }\n    return {\n      hostname: 'localhost',\n      path: url,\n      queryParams: {},\n      scheme: 'http',\n    };\n  }\n  const queryParams: Record<string, string> = {};\n  parsed.searchParams.forEach((value, key) => {\n    queryParams[key] = decodeURIComponent(value);\n  });\n  return {\n    hostname: parsed.hostname || null,\n    // TODO: We should probably update native to follow the default URL behavior closer.\n    path:\n      !parsed.hostname && !parsed.pathname\n        ? null\n        : parsed.pathname === ''\n          ? null\n          : parsed.pathname.replace(/^\\//, ''),\n    queryParams,\n    scheme: parsed.protocol.replace(/:$/, ''),\n  };\n}\n"],"mappings":"AAEA,OAAM,SAAUA,SAASA,CAACC,IAAY,EAAE;EAAEC,WAAW,GAAG;AAAE,IAAuB,EAAE;EACjF,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE,OAAO,EAAE;EAC5C,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACJ,IAAI,EAAEE,MAAM,CAACG,QAAQ,CAACC,MAAM,CAAC;EACjDC,MAAM,CAACC,OAAO,CAACP,WAAW,CAAC,CAACQ,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAI;IACnD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7BR,GAAG,CAACS,YAAY,CAACC,GAAG,CAACH,GAAG,EAAEI,kBAAkB,CAACH,KAAK,CAAC,CAAC;IACtD,CAAC,MAAM,IAAIA,KAAK,IAAI,IAAI,EAAE;MACxBR,GAAG,CAACS,YAAY,CAACC,GAAG,CAClBH,GAAG,EAEHC,KAAK,CACN;IACH;EACF,CAAC,CAAC;EACF,OAAOR,GAAG,CAACY,QAAQ,EAAE,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AAC1C;AAEA,OAAM,SAAUC,KAAKA,CAACd,GAAW;EAC/B,IAAIe,MAAW;EACf,IAAI;IACFA,MAAM,GAAG,IAAId,GAAG,CAACD,GAAG,CAAC;EACvB,CAAC,CAAC,MAAM;IACN,IAAI,OAAOD,MAAM,KAAK,WAAW,EAAE;MACjC,OAAO;QACLiB,QAAQ,EAAE,IAAI;QACdnB,IAAI,EAAEG,GAAG;QACTF,WAAW,EAAE,EAAE;QACfmB,MAAM,EAAE;OACT;IACH;IACA,OAAO;MACLD,QAAQ,EAAE,WAAW;MACrBnB,IAAI,EAAEG,GAAG;MACTF,WAAW,EAAE,EAAE;MACfmB,MAAM,EAAE;KACT;EACH;EACA,MAAMnB,WAAW,GAA2B,EAAE;EAC9CiB,MAAM,CAACN,YAAY,CAACH,OAAO,CAAC,CAACE,KAAK,EAAED,GAAG,KAAI;IACzCT,WAAW,CAACS,GAAG,CAAC,GAAGW,kBAAkB,CAACV,KAAK,CAAC;EAC9C,CAAC,CAAC;EACF,OAAO;IACLQ,QAAQ,EAAED,MAAM,CAACC,QAAQ,IAAI,IAAI;IAEjCnB,IAAI,EACF,CAACkB,MAAM,CAACC,QAAQ,IAAI,CAACD,MAAM,CAACI,QAAQ,GAChC,IAAI,GACJJ,MAAM,CAACI,QAAQ,KAAK,EAAE,GACpB,IAAI,GACJJ,MAAM,CAACI,QAAQ,CAACN,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC1Cf,WAAW;IACXmB,MAAM,EAAEF,MAAM,CAACK,QAAQ,CAACP,OAAO,CAAC,IAAI,EAAE,EAAE;GACzC;AACH","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}