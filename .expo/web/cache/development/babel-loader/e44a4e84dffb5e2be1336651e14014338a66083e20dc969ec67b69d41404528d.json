{"ast":null,"code":"\"use strict\";\n\nvar _s = $RefreshSig$();\nimport { getPathFromState, useStateForPath } from '@react-navigation/core';\nimport * as React from 'react';\nimport { LinkingContext } from \"./LinkingContext.js\";\nexport function useRoutePath() {\n  _s();\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const state = useStateForPath();\n  if (state === undefined) {\n    throw new Error(\"Couldn't find a state for the route object. Is your component inside a screen in a navigator?\");\n  }\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n  const path = React.useMemo(() => {\n    if (options?.enabled === false) {\n      return undefined;\n    }\n    const path = getPathFromStateHelper(state, options?.config);\n    return path;\n  }, [options?.enabled, options?.config, state, getPathFromStateHelper]);\n  return path;\n}\n_s(useRoutePath, \"yLi4qYS+HJFtkhmGE1ZpOSKdtpU=\", false, function () {\n  return [useStateForPath];\n});","map":{"version":3,"names":["getPathFromState","useStateForPath","React","LinkingContext","useRoutePath","_s","options","useContext","state","undefined","Error","getPathFromStateHelper","path","useMemo","enabled","config"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/@react-navigation/native/src/useRoutePath.tsx"],"sourcesContent":["import { getPathFromState, useStateForPath } from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { LinkingContext } from './LinkingContext';\n\n/**\n * Hook to get the path for the current route based on linking options.\n *\n * @returns Path for the current route.\n */\nexport function useRoutePath() {\n  const { options } = React.useContext(LinkingContext);\n  const state = useStateForPath();\n\n  if (state === undefined) {\n    throw new Error(\n      \"Couldn't find a state for the route object. Is your component inside a screen in a navigator?\"\n    );\n  }\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const path = React.useMemo(() => {\n    if (options?.enabled === false) {\n      return undefined;\n    }\n\n    const path = getPathFromStateHelper(state, options?.config);\n\n    return path;\n  }, [options?.enabled, options?.config, state, getPathFromStateHelper]);\n\n  return path;\n}\n"],"mappings":";;;AAAA,SAASA,gBAAgB,EAAEC,eAAe,QAAQ,wBAAwB;AAC1E,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,cAAc,QAAQ,qBAAkB;AAOjD,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM;IAAEC;EAAQ,CAAC,GAAGJ,KAAK,CAACK,UAAU,CAACJ,cAAc,CAAC;EACpD,MAAMK,KAAK,GAAGP,eAAe,CAAC,CAAC;EAE/B,IAAIO,KAAK,KAAKC,SAAS,EAAE;IACvB,MAAM,IAAIC,KAAK,CACb,+FACF,CAAC;EACH;EAEA,MAAMC,sBAAsB,GAAGL,OAAO,EAAEN,gBAAgB,IAAIA,gBAAgB;EAE5E,MAAMY,IAAI,GAAGV,KAAK,CAACW,OAAO,CAAC,MAAM;IAC/B,IAAIP,OAAO,EAAEQ,OAAO,KAAK,KAAK,EAAE;MAC9B,OAAOL,SAAS;IAClB;IAEA,MAAMG,IAAI,GAAGD,sBAAsB,CAACH,KAAK,EAAEF,OAAO,EAAES,MAAM,CAAC;IAE3D,OAAOH,IAAI;EACb,CAAC,EAAE,CAACN,OAAO,EAAEQ,OAAO,EAAER,OAAO,EAAES,MAAM,EAAEP,KAAK,EAAEG,sBAAsB,CAAC,CAAC;EAEtE,OAAOC,IAAI;AACb;AAAAP,EAAA,CAvBgBD,YAAY;EAAA,QAEZH,eAAe;AAAA","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}