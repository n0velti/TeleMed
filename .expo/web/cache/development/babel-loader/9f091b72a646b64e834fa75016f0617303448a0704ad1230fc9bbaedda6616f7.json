{"ast":null,"code":"\"use strict\";\n\nvar _reactJsxDevRuntime = require(\"react/jsx-dev-runtime\");\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"children\"];\nvar _jsxFileName = \"/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/build/layouts/withLayoutContext.js\";\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFilterScreenChildren = useFilterScreenChildren;\nexports.withLayoutContext = withLayoutContext;\nconst react_1 = __importStar(require(\"react\"));\nconst Route_1 = require(\"../Route\");\nconst NativeTabTrigger_1 = require(\"../native-tabs/NativeBottomTabs/NativeTabTrigger\");\nconst useScreens_1 = require(\"../useScreens\");\nconst Protected_1 = require(\"../views/Protected\");\nconst Screen_1 = require(\"../views/Screen\");\nfunction useFilterScreenChildren(children, {\n  isCustomNavigator,\n  contextKey\n} = {}) {\n  return (0, react_1.useMemo)(() => {\n    const customChildren = [];\n    const screens = [];\n    const protectedScreens = new Set();\n    function flattenChild(child, exclude = false) {\n      if ((0, Screen_1.isScreen)(child, contextKey)) {\n        if (exclude) {\n          protectedScreens.add(child.props.name);\n        } else {\n          screens.push(child.props);\n        }\n        return;\n      }\n      if ((0, NativeTabTrigger_1.isNativeTabTrigger)(child, contextKey)) {\n        if (exclude) {\n          protectedScreens.add(child.props.name);\n        } else {\n          const options = (0, NativeTabTrigger_1.convertTabPropsToOptions)(child.props);\n          if (options.hidden === false) {\n            screens.push(Object.assign({}, child.props, {\n              options: (0, NativeTabTrigger_1.convertTabPropsToOptions)(child.props)\n            }));\n          } else {\n            protectedScreens.add(child.props.name);\n          }\n        }\n        return;\n      }\n      if ((0, Protected_1.isProtectedReactElement)(child)) {\n        const excludeChildren = exclude || !child.props.guard;\n        react_1.Children.forEach(child.props.children, protectedChild => {\n          flattenChild(protectedChild, excludeChildren);\n        });\n        return;\n      }\n      if (isCustomNavigator) {\n        customChildren.push(child);\n        return null;\n      }\n      console.warn(`Layout children must be of type Screen, all other children are ignored. To use custom children, create a custom <Layout />. Update Layout Route at: \"app${contextKey}/_layout\"`);\n      return null;\n    }\n    react_1.Children.forEach(children, child => flattenChild(child));\n    if (process.env.NODE_ENV !== 'production') {\n      const names = screens?.map(screen => screen && typeof screen === 'object' && 'name' in screen && screen.name);\n      if (names && new Set(names).size !== names.length) {\n        throw new Error('Screen names must be unique: ' + names);\n      }\n    }\n    return {\n      screens,\n      children: customChildren,\n      protectedScreens\n    };\n  }, [children]);\n}\nfunction withLayoutContext(Nav, processor, useOnlyUserDefinedScreens = false) {\n  var _s = $RefreshSig$();\n  return _s(Object.assign(_s((0, react_1.forwardRef)(_s((_ref, ref) => {\n    _s();\n    let {\n        children: userDefinedChildren\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const contextKey = (0, Route_1.useContextKey)();\n    const {\n      screens,\n      protectedScreens\n    } = useFilterScreenChildren(userDefinedChildren, {\n      contextKey\n    });\n    const processed = processor ? processor(screens ?? []) : screens;\n    const sorted = (0, useScreens_1.useSortedScreens)(processed ?? [], protectedScreens, useOnlyUserDefinedScreens);\n    if (!sorted.length) {\n      return null;\n    }\n    return _reactJsxDevRuntime.jsxDEV(Nav, Object.assign({}, props, {\n      id: contextKey,\n      ref: ref,\n      children: sorted\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 16\n    }, this);\n  }, \"+gbGbdimIehR0GdCed4s/aA1FLY=\", false, function () {\n    return [useFilterScreenChildren];\n  })), \"+gbGbdimIehR0GdCed4s/aA1FLY=\", false, function () {\n    return [useFilterScreenChildren];\n  }), {\n    Screen: Screen_1.Screen,\n    Protected: Protected_1.Protected\n  }), \"+gbGbdimIehR0GdCed4s/aA1FLY=\", false, function () {\n    return [useFilterScreenChildren];\n  });\n}","map":{"version":3,"names":["exports","useFilterScreenChildren","withLayoutContext","react_1","__importStar","require","Route_1","NativeTabTrigger_1","useScreens_1","Protected_1","Screen_1","children","isCustomNavigator","contextKey","useMemo","customChildren","screens","protectedScreens","Set","flattenChild","child","exclude","isScreen","add","props","name","push","isNativeTabTrigger","options","convertTabPropsToOptions","hidden","Object","assign","isProtectedReactElement","excludeChildren","guard","Children","forEach","protectedChild","console","warn","process","env","NODE_ENV","names","map","screen","size","length","Error","Nav","processor","useOnlyUserDefinedScreens","_s","$RefreshSig$","forwardRef","_ref","ref","userDefinedChildren","_objectWithoutPropertiesLoose","_excluded","useContextKey","processed","sorted","useSortedScreens","_reactJsxDevRuntime","jsxDEV","id","fileName","_jsxFileName","lineNumber","columnNumber","Screen","Protected"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/layouts/withLayoutContext.tsx"],"sourcesContent":["import { EventMapBase, NavigationState } from '@react-navigation/native';\nimport React, {\n  Children,\n  forwardRef,\n  ComponentProps,\n  ComponentType,\n  ForwardRefExoticComponent,\n  PropsWithoutRef,\n  ReactNode,\n  RefAttributes,\n  useMemo,\n} from 'react';\n\nimport { useContextKey } from '../Route';\nimport {\n  isNativeTabTrigger,\n  convertTabPropsToOptions,\n} from '../native-tabs/NativeBottomTabs/NativeTabTrigger';\nimport { PickPartial } from '../types';\nimport { useSortedScreens, ScreenProps } from '../useScreens';\nimport { isProtectedReactElement, Protected } from '../views/Protected';\nimport { isScreen, Screen } from '../views/Screen';\n\nexport function useFilterScreenChildren(\n  children: ReactNode,\n  {\n    isCustomNavigator,\n    contextKey,\n  }: {\n    isCustomNavigator?: boolean;\n    /** Used for sending developer hints */\n    contextKey?: string;\n  } = {}\n) {\n  return useMemo(() => {\n    const customChildren: any[] = [];\n\n    const screens: (ScreenProps & { name: string })[] = [];\n    const protectedScreens = new Set<string>();\n\n    function flattenChild(child: ReactNode, exclude = false) {\n      if (isScreen(child, contextKey)) {\n        if (exclude) {\n          protectedScreens.add(child.props.name);\n        } else {\n          screens.push(child.props);\n        }\n        return;\n      }\n\n      if (isNativeTabTrigger(child, contextKey)) {\n        if (exclude) {\n          protectedScreens.add(child.props.name);\n        } else {\n          const options = convertTabPropsToOptions(child.props);\n          if (options.hidden === false) {\n            screens.push({\n              ...child.props,\n              options: convertTabPropsToOptions(child.props),\n            });\n          } else {\n            // - hidden = undefined -> then the route was not specified in navigator\n            // - hidden = true -> then the route is hidden\n            // In this cases we should treat the tab as protected\n            protectedScreens.add(child.props.name);\n          }\n        }\n        return;\n      }\n\n      if (isProtectedReactElement(child)) {\n        const excludeChildren = exclude || !child.props.guard;\n        Children.forEach(child.props.children, (protectedChild) => {\n          flattenChild(protectedChild, excludeChildren);\n        });\n        return;\n      }\n\n      if (isCustomNavigator) {\n        customChildren.push(child);\n        return null;\n      }\n\n      console.warn(\n        `Layout children must be of type Screen, all other children are ignored. To use custom children, create a custom <Layout />. Update Layout Route at: \"app${contextKey}/_layout\"`\n      );\n\n      return null;\n    }\n\n    Children.forEach(children, (child) => flattenChild(child));\n\n    // Add an assertion for development\n    if (process.env.NODE_ENV !== 'production') {\n      // Assert if names are not unique\n      const names = screens?.map(\n        (screen) => screen && typeof screen === 'object' && 'name' in screen && screen.name\n      );\n      if (names && new Set(names).size !== names.length) {\n        throw new Error('Screen names must be unique: ' + names);\n      }\n    }\n\n    return {\n      screens,\n      children: customChildren,\n      protectedScreens,\n    };\n  }, [children]);\n}\n\n/**\n * Returns a navigator that automatically injects matched routes and renders nothing when there are no children.\n * Return type with `children` prop optional.\n * \n * Enables use of other built-in React Navigation navigators and other navigators built with the React Navigation custom navigator API.\n *\n * @param Nav - The navigator component to wrap.\n * @param processor - A function that processes the screens before passing them to the navigator.\n * @param useOnlyUserDefinedScreens - If true, all screens not specified as navigator's children will be ignored.\n *\n *  @example\n * ```tsx app/_layout.tsx\n * import { ParamListBase, TabNavigationState } from \"@react-navigation/native\";\n * import {\n *   createMaterialTopTabNavigator,\n *   MaterialTopTabNavigationOptions,\n *   MaterialTopTabNavigationEventMap,\n * } from \"@react-navigation/material-top-tabs\";\n * import { withLayoutContext } from \"expo-router\";\n * \n * const MaterialTopTabs = createMaterialTopTabNavigator();\n * \n * const ExpoRouterMaterialTopTabs = withLayoutContext<\n *   MaterialTopTabNavigationOptions,\n *   typeof MaterialTopTabs.Navigator,\n *   TabNavigationState<ParamListBase>,\n *   MaterialTopTabNavigationEventMap\n * >(MaterialTopTabs.Navigator);\n\n * export default function TabLayout() {\n *   return <ExpoRouterMaterialTopTabs />;\n * }\n * ```\n */\nexport function withLayoutContext<\n  TOptions extends object,\n  T extends ComponentType<any>,\n  TState extends NavigationState,\n  TEventMap extends EventMapBase,\n>(\n  Nav: T,\n  processor?: (options: ScreenProps[]) => ScreenProps[],\n  useOnlyUserDefinedScreens: boolean = false\n) {\n  return Object.assign(\n    forwardRef(({ children: userDefinedChildren, ...props }: any, ref) => {\n      const contextKey = useContextKey();\n\n      const { screens, protectedScreens } = useFilterScreenChildren(userDefinedChildren, {\n        contextKey,\n      });\n\n      const processed = processor ? processor(screens ?? []) : screens;\n\n      const sorted = useSortedScreens(processed ?? [], protectedScreens, useOnlyUserDefinedScreens);\n\n      // Prevent throwing an error when there are no screens.\n      if (!sorted.length) {\n        return null;\n      }\n\n      return <Nav {...props} id={contextKey} ref={ref} children={sorted} />;\n    }),\n    {\n      Screen,\n      Protected,\n    }\n  ) as ForwardRefExoticComponent<\n    PropsWithoutRef<PickPartial<ComponentProps<T>, 'children'>> & RefAttributes<unknown>\n  > & {\n    Screen: (props: ScreenProps<TOptions, TState, TEventMap>) => null;\n    Protected: typeof Protected;\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBAA,OAAA,CAAAC,uBAAA,GAAAA,uBAAA;AA0HAD,OAAA,CAAAE,iBAAA,GAAAA,iBAAA;AAhJA,MAAAC,OAAA,GAAAC,YAAA,CAAAC,OAAA;AAYA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,kBAAA,GAAAF,OAAA;AAKA,MAAAG,YAAA,GAAAH,OAAA;AACA,MAAAI,WAAA,GAAAJ,OAAA;AACA,MAAAK,QAAA,GAAAL,OAAA;AAEA,SAAgBJ,uBAAuBA,CACrCU,QAAmB,EACnB;EACEC,iBAAiB;EACjBC;AAAU,IAKR,EAAE;EAEN,OAAO,IAAAV,OAAA,CAAAW,OAAO,EAAC,MAAK;IAClB,MAAMC,cAAc,GAAU,EAAE;IAEhC,MAAMC,OAAO,GAAuC,EAAE;IACtD,MAAMC,gBAAgB,GAAG,IAAIC,GAAG,EAAU;IAE1C,SAASC,YAAYA,CAACC,KAAgB,EAAEC,OAAO,GAAG,KAAK;MACrD,IAAI,IAAAX,QAAA,CAAAY,QAAQ,EAACF,KAAK,EAAEP,UAAU,CAAC,EAAE;QAC/B,IAAIQ,OAAO,EAAE;UACXJ,gBAAgB,CAACM,GAAG,CAACH,KAAK,CAACI,KAAK,CAACC,IAAI,CAAC;QACxC,CAAC,MAAM;UACLT,OAAO,CAACU,IAAI,CAACN,KAAK,CAACI,KAAK,CAAC;QAC3B;QACA;MACF;MAEA,IAAI,IAAAjB,kBAAA,CAAAoB,kBAAkB,EAACP,KAAK,EAAEP,UAAU,CAAC,EAAE;QACzC,IAAIQ,OAAO,EAAE;UACXJ,gBAAgB,CAACM,GAAG,CAACH,KAAK,CAACI,KAAK,CAACC,IAAI,CAAC;QACxC,CAAC,MAAM;UACL,MAAMG,OAAO,GAAG,IAAArB,kBAAA,CAAAsB,wBAAwB,EAACT,KAAK,CAACI,KAAK,CAAC;UACrD,IAAII,OAAO,CAACE,MAAM,KAAK,KAAK,EAAE;YAC5Bd,OAAO,CAACU,IAAI,CAAAK,MAAA,CAAAC,MAAA,KACPZ,KAAK,CAACI,KAAK;cACdI,OAAO,EAAE,IAAArB,kBAAA,CAAAsB,wBAAwB,EAACT,KAAK,CAACI,KAAK;YAAC,EAC/C,CAAC;UACJ,CAAC,MAAM;YAILP,gBAAgB,CAACM,GAAG,CAACH,KAAK,CAACI,KAAK,CAACC,IAAI,CAAC;UACxC;QACF;QACA;MACF;MAEA,IAAI,IAAAhB,WAAA,CAAAwB,uBAAuB,EAACb,KAAK,CAAC,EAAE;QAClC,MAAMc,eAAe,GAAGb,OAAO,IAAI,CAACD,KAAK,CAACI,KAAK,CAACW,KAAK;QACrDhC,OAAA,CAAAiC,QAAQ,CAACC,OAAO,CAACjB,KAAK,CAACI,KAAK,CAACb,QAAQ,EAAG2B,cAAc,IAAI;UACxDnB,YAAY,CAACmB,cAAc,EAAEJ,eAAe,CAAC;QAC/C,CAAC,CAAC;QACF;MACF;MAEA,IAAItB,iBAAiB,EAAE;QACrBG,cAAc,CAACW,IAAI,CAACN,KAAK,CAAC;QAC1B,OAAO,IAAI;MACb;MAEAmB,OAAO,CAACC,IAAI,CACV,2JAA2J3B,UAAU,WAAW,CACjL;MAED,OAAO,IAAI;IACb;IAEAV,OAAA,CAAAiC,QAAQ,CAACC,OAAO,CAAC1B,QAAQ,EAAGS,KAAK,IAAKD,YAAY,CAACC,KAAK,CAAC,CAAC;IAG1D,IAAIqB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MAEzC,MAAMC,KAAK,GAAG5B,OAAO,EAAE6B,GAAG,CACvBC,MAAM,IAAKA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,MAAM,IAAIA,MAAM,IAAIA,MAAM,CAACrB,IAAI,CACpF;MACD,IAAImB,KAAK,IAAI,IAAI1B,GAAG,CAAC0B,KAAK,CAAC,CAACG,IAAI,KAAKH,KAAK,CAACI,MAAM,EAAE;QACjD,MAAM,IAAIC,KAAK,CAAC,+BAA+B,GAAGL,KAAK,CAAC;MAC1D;IACF;IAEA,OAAO;MACL5B,OAAO;MACPL,QAAQ,EAAEI,cAAc;MACxBE;KACD;EACH,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;AAChB;AAoCA,SAAgBT,iBAAiBA,CAM/BgD,GAAM,EACNC,SAAqD,EACrDC,yBAAA,GAAqC,KAAK;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAE1C,OAAAD,EAAA,CAAOtB,MAAM,CAACC,MAAM,CAAAqB,EAAA,CAClB,IAAAlD,OAAA,CAAAoD,UAAU,EAAAF,EAAA,CAAC,CAAAG,IAAA,EAAmDC,GAAG,KAAI;IAAAJ,EAAA;IAAA,IAAzD;QAAE1C,QAAQ,EAAE+C;MAA6B,CAAO,GAAAF,IAAA;MAAZhC,KAAK,GAAAmC,6BAAA,CAAAH,IAAA,EAAAI,SAAA;IACnD,MAAM/C,UAAU,GAAG,IAAAP,OAAA,CAAAuD,aAAa,GAAE;IAElC,MAAM;MAAE7C,OAAO;MAAEC;IAAgB,CAAE,GAAGhB,uBAAuB,CAACyD,mBAAmB,EAAE;MACjF7C;KACD,CAAC;IAEF,MAAMiD,SAAS,GAAGX,SAAS,GAAGA,SAAS,CAACnC,OAAO,IAAI,EAAE,CAAC,GAAGA,OAAO;IAEhE,MAAM+C,MAAM,GAAG,IAAAvD,YAAA,CAAAwD,gBAAgB,EAACF,SAAS,IAAI,EAAE,EAAE7C,gBAAgB,EAAEmC,yBAAyB,CAAC;IAG7F,IAAI,CAACW,MAAM,CAACf,MAAM,EAAE;MAClB,OAAO,IAAI;IACb;IAEA,OAAOiB,mBAAA,CAAAC,MAAA,CAAChB,GAAG,EAAAnB,MAAA,CAAAC,MAAA,KAAKR,KAAK;MAAE2C,EAAE,EAAEtD,UAAW;MAAC4C,GAAG,EAAEA,GAAI;MAAC9C,QAAQ,EAAEoD;IAAO;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EACvE,CAAC;IAAA,QAduCtE,uBAAuB;EAAA,EAc9D,CAAC;IAAA,QAdsCA,uBAAuB;EAAA,IAe/D;IACEuE,MAAM,EAAN9D,QAAA,CAAA8D,MAAM;IACNC,SAAS,EAAThE,WAAA,CAAAgE;GACD,CAMF;IAAA,QAxByCxE,uBAAuB;EAAA;AAyBnE","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}