{"ast":null,"code":"\"use strict\";\n\nvar _s = $RefreshSig$();\nimport * as React from 'react';\nimport { NavigationBuilderContext } from \"./NavigationBuilderContext.js\";\nexport function useOnRouteFocus({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState\n}) {\n  _s();\n  const {\n    onRouteFocus: onRouteFocusParent\n  } = React.useContext(NavigationBuilderContext);\n  return React.useCallback(key => {\n    const state = getState();\n    const result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}\n_s(useOnRouteFocus, \"R2wAgmSGqhKz2Nm4JrT5UV+8kZw=\");","map":{"version":3,"names":["React","NavigationBuilderContext","useOnRouteFocus","router","getState","key","sourceRouteKey","setState","_s","onRouteFocus","onRouteFocusParent","useContext","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/@react-navigation/core/src/useOnRouteFocus.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport { NavigationBuilderContext } from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"],"mappings":";;;AAKA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,SAASC,wBAAwB,QAAQ,+BAA4B;AAcrE,OAAO,SAASC,eAAeA,CAAkC;EAC/DC,MAAM;EACNC,QAAQ;EACRC,GAAG,EAAEC,cAAc;EACnBC;AACe,CAAC,EAAE;EAAAC,EAAA;EAClB,MAAM;IAAEC,YAAY,EAAEC;EAAmB,CAAC,GAAGV,KAAK,CAACW,UAAU,CAC3DV,wBACF,CAAC;EAED,OAAOD,KAAK,CAACY,WAAW,CACrBP,GAAW,IAAK;IACf,MAAMQ,KAAK,GAAGT,QAAQ,CAAC,CAAC;IACxB,MAAMU,MAAM,GAAGX,MAAM,CAACY,qBAAqB,CAACF,KAAK,EAAER,GAAG,CAAC;IAEvD,IAAIS,MAAM,KAAKD,KAAK,EAAE;MACpBN,QAAQ,CAACO,MAAM,CAAC;IAClB;IAEA,IAAIJ,kBAAkB,KAAKM,SAAS,IAAIV,cAAc,KAAKU,SAAS,EAAE;MACpEN,kBAAkB,CAACJ,cAAc,CAAC;IACpC;EACF,CAAC,EACD,CAACF,QAAQ,EAAEM,kBAAkB,EAAEP,MAAM,EAAEI,QAAQ,EAAED,cAAc,CACjE,CAAC;AACH;AAAAE,EAAA,CAzBgBN,eAAe","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}