{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React from 'react';\nimport { LogBoxLog } from './LogBoxLog';\nexport const LogContext = React.createContext(null);\nexport function useLogs() {\n  _s();\n  const logs = React.useContext(LogContext);\n  if (!logs) {\n    if (true && typeof window !== 'undefined') {\n      const expoCliStaticErrorElement = document.getElementById('_expo-static-error');\n      if (expoCliStaticErrorElement?.textContent) {\n        const raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return Object.assign({}, raw, {\n          logs: raw.logs.map(raw => new LogBoxLog(raw))\n        });\n      }\n    }\n    throw new Error('useLogs must be used within a LogProvider');\n  }\n  return logs;\n}\n_s(useLogs, \"XC662sfZbRZ3JDxV0CWTg7+OLnM=\");\nexport function useSelectedLog() {\n  _s2();\n  const {\n    selectedLogIndex,\n    logs\n  } = useLogs();\n  return logs[selectedLogIndex];\n}\n_s2(useSelectedLog, \"cvlvCbs5zBfQDBhEwCn6mrWme3w=\", false, function () {\n  return [useLogs];\n});","map":{"version":3,"names":["React","LogBoxLog","LogContext","createContext","useLogs","_s","logs","useContext","window","expoCliStaticErrorElement","document","getElementById","textContent","raw","JSON","parse","Object","assign","map","Error","useSelectedLog","_s2","selectedLogIndex"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/@expo/metro-runtime/src/error-overlay/Data/LogContext.tsx"],"sourcesContent":["import React from 'react';\n\nimport { LogBoxLog } from './LogBoxLog';\n\n// Context provider for Array<LogBoxLog>\n\nexport const LogContext = React.createContext<{\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} | null>(null);\n\nexport function useLogs(): {\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} {\n  const logs = React.useContext(LogContext);\n  if (!logs) {\n    if (process.env.EXPO_OS === 'web' && typeof window !== 'undefined') {\n      // Logbox data that is pre-fetched on the dev server and rendered here.\n      const expoCliStaticErrorElement = document.getElementById('_expo-static-error');\n      if (expoCliStaticErrorElement?.textContent) {\n        const raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return {\n          ...raw,\n          logs: raw.logs.map((raw: any) => new LogBoxLog(raw)),\n        };\n      }\n    }\n\n    throw new Error('useLogs must be used within a LogProvider');\n  }\n  return logs;\n}\n\nexport function useSelectedLog() {\n  const { selectedLogIndex, logs } = useLogs();\n  return logs[selectedLogIndex];\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,QAAQ,aAAa;AAIvC,OAAO,MAAMC,UAAU,GAAGF,KAAK,CAACG,aAAa,CAInC,IAAI,CAAC;AAEf,OAAO,SAASC,OAAOA,CAAA,EAIrB;EAAAC,EAAA;EACA,MAAMC,IAAI,GAAGN,KAAK,CAACO,UAAU,CAACL,UAAU,CAAC;EACzC,IAAI,CAACI,IAAI,EAAE;IACT,IAAI,QAAiC,OAAOE,MAAM,KAAK,WAAW,EAAE;MAElE,MAAMC,yBAAyB,GAAGC,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAC;MAC/E,IAAIF,yBAAyB,EAAEG,WAAW,EAAE;QAC1C,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACN,yBAAyB,CAACG,WAAW,CAAC;QAC7D,OAAAI,MAAA,CAAAC,MAAA,KACKJ,GAAG;UACNP,IAAI,EAAEO,GAAG,CAACP,IAAI,CAACY,GAAG,CAAEL,GAAQ,IAAK,IAAIZ,SAAS,CAACY,GAAG,CAAC;QAAC;MAExD;IACF;IAEA,MAAM,IAAIM,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA,OAAOb,IAAI;AACb;AAACD,EAAA,CAtBeD,OAAO;AAwBvB,OAAO,SAASgB,cAAcA,CAAA,EAAG;EAAAC,GAAA;EAC/B,MAAM;IAAEC,gBAAgB;IAAEhB;EAAK,CAAC,GAAGF,OAAO,CAAC,CAAC;EAC5C,OAAOE,IAAI,CAACgB,gBAAgB,CAAC;AAC/B;AAACD,GAAA,CAHeD,cAAc;EAAA,QACOhB,OAAO;AAAA","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}