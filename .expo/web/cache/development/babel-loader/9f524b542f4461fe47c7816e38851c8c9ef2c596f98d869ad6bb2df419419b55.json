{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nexport function useEvent(eventEmitter, eventName, initialValue = null) {\n  _s();\n  const [event, setEvent] = useState(initialValue);\n  const listener = event => setEvent(event);\n  useEventListener(eventEmitter, eventName, listener);\n  return event;\n}\n_s(useEvent, \"Px/ZTOygRnnnd4+Jsg7+EQ2V09A=\", false, function () {\n  return [useEventListener];\n});\nexport function useEventListener(eventEmitter, eventName, listener) {\n  _s2();\n  const listenerRef = useRef(listener);\n  listenerRef.current = listener;\n  useEffect(() => {\n    const callback = (...args) => listenerRef.current(...args);\n    const subscription = eventEmitter.addListener(eventName, callback);\n    return () => subscription.remove();\n  }, [eventEmitter, eventName, listenerRef]);\n}\n_s2(useEventListener, \"jU3rOsPD7COJJhdU5lMPE6t6ReU=\");","map":{"version":3,"names":["useEffect","useRef","useState","useEvent","eventEmitter","eventName","initialValue","_s","event","setEvent","listener","useEventListener","_s2","listenerRef","current","callback","args","subscription","addListener","remove"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo/src/hooks/useEvent.ts"],"sourcesContent":["import type { EventEmitter } from 'expo-modules-core/types';\nimport { useEffect, useRef, useState } from 'react';\n\ntype AnyEventListener = (...args: any[]) => any;\n\n/**\n * Type helper that infers the event name from the emitter's events map.\n */\ntype InferEventName<TEventsMap> =\n  TEventsMap extends Record<infer TEventName extends keyof TEventsMap, AnyEventListener>\n    ? TEventName\n    : never;\n\n/**\n * Type helper that infers the event listener from the emitter's events map.\n */\ntype InferEventListener<TEventsMap, TEventName extends keyof TEventsMap> =\n  TEventsMap extends Record<TEventName, infer TEventListener extends AnyEventListener>\n    ? TEventListener\n    : never;\n\n/**\n * Type helper that infers the first parameter of the event listener.\n */\ntype InferEventParameter<\n  TEventListener extends AnyEventListener,\n  TInitialValue,\n> = TInitialValue extends Parameters<TEventListener>[0]\n  ? Parameters<TEventListener>[0]\n  : Parameters<TEventListener>[0] | TInitialValue | null;\n\n/**\n * React hook that listens to events emitted by the given object. The returned value is an event parameter\n * that gets updated whenever a new event is dispatched.\n * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).\n * @param eventName Name of the event to listen to.\n * @param initialValue An event parameter to use until the event is called for the first time.\n * @returns A parameter of the event listener.\n * @example\n * ```tsx\n * import { useEvent } from 'expo';\n * import { VideoPlayer } from 'expo-video';\n *\n * export function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {\n *   const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });\n *\n *   return <Text>{`Player status: ${status}`}</Text>;\n * }\n * ```\n */\nexport function useEvent<\n  TEventsMap extends Record<string, AnyEventListener>,\n  TEventName extends InferEventName<TEventsMap>,\n  TEventListener extends InferEventListener<TEventsMap, TEventName>,\n  TInitialValue extends Parameters<TEventListener>[0] | null,\n>(\n  eventEmitter: EventEmitter<TEventsMap>,\n  eventName: TEventName,\n  initialValue: TInitialValue | null = null\n): InferEventParameter<TEventListener, TInitialValue> {\n  const [event, setEvent] = useState<Parameters<TEventListener>[0] | TInitialValue | null>(\n    initialValue\n  );\n  const listener = (event: Parameters<TEventListener>[0]) => setEvent(event);\n\n  useEventListener(eventEmitter, eventName, listener as InferEventListener<TEventsMap, TEventName>);\n\n  return event as InferEventParameter<TEventListener, TInitialValue>;\n}\n\n/**\n * React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched.\n * The event listener is automatically added during the first render and removed when the component unmounts.\n * @param eventEmitter An object that emits events. For example, a native module or shared object or an instance of [`EventEmitter`](#eventemitter).\n * @param eventName Name of the event to listen to.\n * @param listener A function to call when the event is dispatched.\n * @example\n * ```tsx\n * import { useEventListener } from 'expo';\n * import { useVideoPlayer, VideoView } from 'expo-video';\n *\n * export function VideoPlayerView() {\n *   const player = useVideoPlayer(videoSource);\n *\n *   useEventListener(player, 'playingChange', ({ isPlaying }) => {\n *     console.log('Player is playing:', isPlaying);\n *   });\n *\n *   return <VideoView player={player} />;\n * }\n * ```\n */\nexport function useEventListener<\n  TEventsMap extends Record<string, AnyEventListener>,\n  TEventName extends InferEventName<TEventsMap>,\n  TEventListener extends InferEventListener<TEventsMap, TEventName>,\n>(eventEmitter: EventEmitter<TEventsMap>, eventName: TEventName, listener: TEventListener): void {\n  // Always use the most recent version of the listener inside the effect,\n  // without memoization so the listeners don't have to be swapped with every render.\n  const listenerRef = useRef<TEventListener>(listener);\n  listenerRef.current = listener;\n\n  useEffect(() => {\n    const callback = (...args: any[]) => listenerRef.current(...args);\n    const subscription = eventEmitter.addListener<TEventName>(\n      eventName,\n      callback as TEventsMap[TEventName]\n    );\n\n    return () => subscription.remove();\n  }, [eventEmitter, eventName, listenerRef]);\n}\n"],"mappings":";;AACA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAiDnD,OAAO,SAASC,QAAQA,CAMtBC,YAAsC,EACtCC,SAAqB,EACrBC,YAAkC,GAAG,IAAI,EACW;EAAAC,EAAA;EACpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAChCI,YACF,CAAC;EACD,MAAMI,QAAQ,GAAIF,KAAoC,IAAKC,QAAQ,CAACD,KAAK,CAAC;EAE1EG,gBAAgB,CAACP,YAAY,EAAEC,SAAS,EAAEK,QAAsD,CAAC;EAEjG,OAAOF,KAAK;AACd;AAACD,EAAA,CAlBeJ,QAAQ;EAAA,QAetBQ,gBAAgB;AAAA;AA2BlB,OAAO,SAASA,gBAAgBA,CAI9BP,YAAsC,EAAEC,SAAqB,EAAEK,QAAwB,EAAQ;EAAAE,GAAA;EAG/F,MAAMC,WAAW,GAAGZ,MAAM,CAAiBS,QAAQ,CAAC;EACpDG,WAAW,CAACC,OAAO,GAAGJ,QAAQ;EAE9BV,SAAS,CAAC,MAAM;IACd,MAAMe,QAAQ,GAAGA,CAAC,GAAGC,IAAW,KAAKH,WAAW,CAACC,OAAO,CAAC,GAAGE,IAAI,CAAC;IACjE,MAAMC,YAAY,GAAGb,YAAY,CAACc,WAAW,CAC3Cb,SAAS,EACTU,QACF,CAAC;IAED,OAAO,MAAME,YAAY,CAACE,MAAM,CAAC,CAAC;EACpC,CAAC,EAAE,CAACf,YAAY,EAAEC,SAAS,EAAEQ,WAAW,CAAC,CAAC;AAC5C;AAACD,GAAA,CAnBeD,gBAAgB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}