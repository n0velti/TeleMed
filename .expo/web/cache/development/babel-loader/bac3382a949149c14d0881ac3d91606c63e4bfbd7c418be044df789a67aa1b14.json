{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"children\"],\n  _excluded2 = [\"children\"];\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\nvar index_exports = {};\n__export(index_exports, {\n  Root: () => Slot,\n  Slot: () => Slot,\n  Slottable: () => Slottable,\n  createSlot: () => createSlot,\n  createSlottable: () => createSlottable\n});\nmodule.exports = __toCommonJS(index_exports);\nvar React = __toESM(require(\"react\"));\nvar import_react_compose_refs = require(\"@radix-ui/react-compose-refs\");\nvar import_jsx_runtime = require(\"react/jsx-runtime\");\nfunction createSlot(ownerName) {\n  const SlotClone = createSlotClone(ownerName);\n  const Slot2 = React.forwardRef((props, forwardedRef) => {\n    const {\n        children\n      } = props,\n      slotProps = _objectWithoutPropertiesLoose(props, _excluded);\n    const childrenArray = React.Children.toArray(children);\n    const slottable = childrenArray.find(isSlottable);\n    if (slottable) {\n      const newElement = slottable.props.children;\n      const newChildren = childrenArray.map(child => {\n        if (child === slottable) {\n          if (React.Children.count(newElement) > 1) return React.Children.only(null);\n          return React.isValidElement(newElement) ? newElement.props.children : null;\n        } else {\n          return child;\n        }\n      });\n      return (0, import_jsx_runtime.jsx)(SlotClone, Object.assign({}, slotProps, {\n        ref: forwardedRef,\n        children: React.isValidElement(newElement) ? React.cloneElement(newElement, void 0, newChildren) : null\n      }));\n    }\n    return (0, import_jsx_runtime.jsx)(SlotClone, Object.assign({}, slotProps, {\n      ref: forwardedRef,\n      children\n    }));\n  });\n  Slot2.displayName = `${ownerName}.Slot`;\n  return Slot2;\n}\nvar Slot = createSlot(\"Slot\");\nfunction createSlotClone(ownerName) {\n  const SlotClone = React.forwardRef((props, forwardedRef) => {\n    const {\n        children\n      } = props,\n      slotProps = _objectWithoutPropertiesLoose(props, _excluded2);\n    if (React.isValidElement(children)) {\n      const childrenRef = getElementRef(children);\n      const props2 = mergeProps(slotProps, children.props);\n      if (children.type !== React.Fragment) {\n        props2.ref = forwardedRef ? (0, import_react_compose_refs.composeRefs)(forwardedRef, childrenRef) : childrenRef;\n      }\n      return React.cloneElement(children, props2);\n    }\n    return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n  });\n  SlotClone.displayName = `${ownerName}.SlotClone`;\n  return SlotClone;\n}\nvar SLOTTABLE_IDENTIFIER = Symbol(\"radix.slottable\");\nfunction createSlottable(ownerName) {\n  const Slottable2 = ({\n    children\n  }) => {\n    return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {\n      children\n    });\n  };\n  Slottable2.displayName = `${ownerName}.Slottable`;\n  Slottable2.__radixId = SLOTTABLE_IDENTIFIER;\n  return Slottable2;\n}\nvar Slottable = createSlottable(\"Slottable\");\nfunction isSlottable(child) {\n  return React.isValidElement(child) && typeof child.type === \"function\" && \"__radixId\" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;\n}\nfunction mergeProps(slotProps, childProps) {\n  const overrideProps = Object.assign({}, childProps);\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      } else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    } else if (propName === \"style\") {\n      overrideProps[propName] = Object.assign({}, slotPropValue, childPropValue);\n    } else if (propName === \"className\") {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(\" \");\n    }\n  }\n  return Object.assign({}, slotProps, overrideProps);\n}\nfunction getElementRef(element) {\n  let getter = Object.getOwnPropertyDescriptor(element.props, \"ref\")?.get;\n  let mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.ref;\n  }\n  getter = Object.getOwnPropertyDescriptor(element, \"ref\")?.get;\n  mayWarn = getter && \"isReactWarning\" in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return element.props.ref;\n  }\n  return element.props.ref || element.ref;\n}","map":{"version":3,"names":["index_exports","__export","Root","Slot","Slottable","createSlot","createSlottable","module","exports","__toCommonJS","React","__toESM","require","import_react_compose_refs","import_jsx_runtime","ownerName","SlotClone","createSlotClone","Slot2","forwardRef","props","forwardedRef","children","slotProps","_objectWithoutPropertiesLoose","_excluded","childrenArray","Children","toArray","slottable","find","isSlottable","newElement","newChildren","map","child","count","only","isValidElement","jsx","Object","assign","ref","cloneElement","displayName","_excluded2","childrenRef","getElementRef","props2","mergeProps","type","Fragment","composeRefs","SLOTTABLE_IDENTIFIER","Symbol","Slottable2","__radixId","childProps","overrideProps","propName","slotPropValue","childPropValue","isHandler","test","args","filter","Boolean","join","element","getter","getOwnPropertyDescriptor","get","mayWarn","isReactWarning"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/node_modules/@radix-ui/react-slot/src/index.ts","/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/node_modules/@radix-ui/react-slot/src/slot.tsx"],"sourcesContent":["export {\n  Slot,\n  Slottable,\n  //\n  Root,\n  createSlot,\n  createSlottable,\n} from './slot';\nexport type { SlotProps } from './slot';\n","import * as React from 'react';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotProps extends React.HTMLAttributes<HTMLElement> {\n  children?: React.ReactNode;\n}\n\n/* @__NO_SIDE_EFFECTS__ */ export function createSlot(ownerName: string) {\n  const SlotClone = createSlotClone(ownerName);\n  const Slot = React.forwardRef<HTMLElement, SlotProps>((props, forwardedRef) => {\n    const { children, ...slotProps } = props;\n    const childrenArray = React.Children.toArray(children);\n    const slottable = childrenArray.find(isSlottable);\n\n    if (slottable) {\n      // the new element to render is the one passed as a child of `Slottable`\n      const newElement = slottable.props.children;\n\n      const newChildren = childrenArray.map((child) => {\n        if (child === slottable) {\n          // because the new element will be the one rendered, we are only interested\n          // in grabbing its children (`newElement.props.children`)\n          if (React.Children.count(newElement) > 1) return React.Children.only(null);\n          return React.isValidElement(newElement)\n            ? (newElement.props as { children: React.ReactNode }).children\n            : null;\n        } else {\n          return child;\n        }\n      });\n\n      return (\n        <SlotClone {...slotProps} ref={forwardedRef}>\n          {React.isValidElement(newElement)\n            ? React.cloneElement(newElement, undefined, newChildren)\n            : null}\n        </SlotClone>\n      );\n    }\n\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {children}\n      </SlotClone>\n    );\n  });\n\n  Slot.displayName = `${ownerName}.Slot`;\n  return Slot;\n}\n\nconst Slot = createSlot('Slot');\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SlotCloneProps {\n  children: React.ReactNode;\n}\n\n/* @__NO_SIDE_EFFECTS__ */ function createSlotClone(ownerName: string) {\n  const SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n    const { children, ...slotProps } = props;\n\n    if (React.isValidElement(children)) {\n      const childrenRef = getElementRef(children);\n      const props = mergeProps(slotProps, children.props as AnyProps);\n      // do not pass ref to React.Fragment for React 19 compatibility\n      if (children.type !== React.Fragment) {\n        props.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;\n      }\n      return React.cloneElement(children, props);\n    }\n\n    return React.Children.count(children) > 1 ? React.Children.only(null) : null;\n  });\n\n  SlotClone.displayName = `${ownerName}.SlotClone`;\n  return SlotClone;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst SLOTTABLE_IDENTIFIER = Symbol('radix.slottable');\n\ninterface SlottableProps {\n  children: React.ReactNode;\n}\n\ninterface SlottableComponent extends React.FC<SlottableProps> {\n  __radixId: symbol;\n}\n\n/* @__NO_SIDE_EFFECTS__ */ export function createSlottable(ownerName: string) {\n  const Slottable: SlottableComponent = ({ children }) => {\n    return <>{children}</>;\n  };\n  Slottable.displayName = `${ownerName}.Slottable`;\n  Slottable.__radixId = SLOTTABLE_IDENTIFIER;\n  return Slottable;\n}\n\nconst Slottable = createSlottable('Slottable');\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction isSlottable(\n  child: React.ReactNode\n): child is React.ReactElement<SlottableProps, typeof Slottable> {\n  return (\n    React.isValidElement(child) &&\n    typeof child.type === 'function' &&\n    '__radixId' in child.type &&\n    child.type.__radixId === SLOTTABLE_IDENTIFIER\n  );\n}\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n\n    const isHandler = /^on[A-Z]/.test(propName);\n    if (isHandler) {\n      // if the handler exists on both, we compose them\n      if (slotPropValue && childPropValue) {\n        overrideProps[propName] = (...args: unknown[]) => {\n          childPropValue(...args);\n          slotPropValue(...args);\n        };\n      }\n      // but if it exists only on the slot, we use only this one\n      else if (slotPropValue) {\n        overrideProps[propName] = slotPropValue;\n      }\n    }\n    // if it's `style`, we merge them\n    else if (propName === 'style') {\n      overrideProps[propName] = { ...slotPropValue, ...childPropValue };\n    } else if (propName === 'className') {\n      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\n// Before React 19 accessing `element.props.ref` will throw a warning and suggest using `element.ref`\n// After React 19 accessing `element.ref` does the opposite.\n// https://github.com/facebook/react/pull/28348\n//\n// Access the ref using the method that doesn't yield a warning.\nfunction getElementRef(element: React.ReactElement) {\n  // React <=18 in DEV\n  let getter = Object.getOwnPropertyDescriptor(element.props, 'ref')?.get;\n  let mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return (element as any).ref;\n  }\n\n  // React 19 in DEV\n  getter = Object.getOwnPropertyDescriptor(element, 'ref')?.get;\n  mayWarn = getter && 'isReactWarning' in getter && getter.isReactWarning;\n  if (mayWarn) {\n    return (element.props as { ref?: React.Ref<unknown> }).ref;\n  }\n\n  // Not DEV\n  return (element.props as { ref?: React.Ref<unknown> }).ref || (element as any).ref;\n}\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Slot as Root,\n};\nexport type { SlotProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}