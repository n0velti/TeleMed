{"ast":null,"code":"\"use strict\";\n'use client';\n\nvar _reactJsxDevRuntime = require(\"react/jsx-dev-runtime\");\nvar _jsxFileName = \"/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/build/link/preview/native.js\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeLinkPreviewAction = NativeLinkPreviewAction;\nexports.NativeLinkPreview = NativeLinkPreview;\nexports.NativeLinkPreviewContent = NativeLinkPreviewContent;\nconst expo_1 = require(\"expo\");\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst areNativeViewsAvailable = false && !react_native_1.Platform.isTV && global.RN$Bridgeless === true;\nconst LinkPreviewNativeActionView = areNativeViewsAvailable ? (0, expo_1.requireNativeView)('ExpoRouterNativeLinkPreview', 'LinkPreviewNativeActionView') : null;\nfunction NativeLinkPreviewAction(props) {\n  if (!LinkPreviewNativeActionView) {\n    return null;\n  }\n  return _reactJsxDevRuntime.jsxDEV(LinkPreviewNativeActionView, Object.assign({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 12\n  }, this);\n}\n_c = NativeLinkPreviewAction;\nconst NativeLinkPreviewView = areNativeViewsAvailable ? (0, expo_1.requireNativeView)('ExpoRouterNativeLinkPreview', 'NativeLinkPreviewView') : null;\nfunction NativeLinkPreview(props) {\n  if (!NativeLinkPreviewView) {\n    return null;\n  }\n  return _reactJsxDevRuntime.jsxDEV(NativeLinkPreviewView, Object.assign({}, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 12\n  }, this);\n}\n_c2 = NativeLinkPreview;\nconst NativeLinkPreviewContentView = areNativeViewsAvailable ? (0, expo_1.requireNativeView)('ExpoRouterNativeLinkPreview', 'NativeLinkPreviewContentView') : null;\nfunction NativeLinkPreviewContent(props) {\n  if (!NativeLinkPreviewContentView) {\n    return null;\n  }\n  const style = react_native_1.StyleSheet.flatten([props.style, {\n    position: 'absolute',\n    top: 0,\n    left: 0\n  }]);\n  return _reactJsxDevRuntime.jsxDEV(NativeLinkPreviewContentView, Object.assign({}, props, {\n    style: style\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 12\n  }, this);\n}\n_c3 = NativeLinkPreviewContent;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"NativeLinkPreviewAction\");\n$RefreshReg$(_c2, \"NativeLinkPreview\");\n$RefreshReg$(_c3, \"NativeLinkPreviewContent\");","map":{"version":3,"names":["_reactJsxDevRuntime","require","_jsxFileName","exports","NativeLinkPreviewAction","NativeLinkPreview","NativeLinkPreviewContent","expo_1","react_native_1","areNativeViewsAvailable","Platform","isTV","global","RN$Bridgeless","LinkPreviewNativeActionView","requireNativeView","props","jsxDEV","Object","assign","fileName","lineNumber","columnNumber","_c","NativeLinkPreviewView","_c2","NativeLinkPreviewContentView","style","StyleSheet","flatten","position","top","left","_c3","$RefreshReg$"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/link/preview/native.tsx"],"sourcesContent":["'use client';\n\nimport { requireNativeView } from 'expo';\nimport { Platform, StyleSheet, type ViewProps } from 'react-native';\n\nconst areNativeViewsAvailable =\n  process.env.EXPO_OS === 'ios' && !Platform.isTV && global.RN$Bridgeless === true;\n\n// #region Action View\nexport interface NativeLinkPreviewActionProps {\n  title: string;\n  icon?: string;\n  children?: React.ReactNode;\n  disabled?: boolean;\n  destructive?: boolean;\n  // This may lead to race conditions, when two menu actions are on at the same time.\n  // The logic should be enforced in the JS code, rather than in the native code.\n  // singleSelection?: boolean;\n  displayAsPalette?: boolean;\n  displayInline?: boolean;\n  isOn?: boolean;\n  // There are issues with menu state updates when keep presented is set to true.\n  // When updating the context menu state, it will either not update or it will recreate the menu. The latter is a problem,\n  // because it will close all opened submenus and reset the scroll position.\n  // TODO: (@ubax) find a way to fix this.\n  keepPresented?: boolean;\n  onSelected: () => void;\n}\nconst LinkPreviewNativeActionView: React.ComponentType<NativeLinkPreviewActionProps> | null =\n  areNativeViewsAvailable\n    ? requireNativeView('ExpoRouterNativeLinkPreview', 'LinkPreviewNativeActionView')\n    : null;\nexport function NativeLinkPreviewAction(props: NativeLinkPreviewActionProps) {\n  if (!LinkPreviewNativeActionView) {\n    return null;\n  }\n  return <LinkPreviewNativeActionView {...props} />;\n}\n// #endregion\n\n// #region Preview View\nexport interface TabPath {\n  oldTabKey: string;\n  newTabKey: string;\n}\nexport interface NativeLinkPreviewProps extends ViewProps {\n  nextScreenId: string | undefined;\n  tabPath:\n    | {\n        path: TabPath[];\n      }\n    | undefined;\n  disableForceFlatten?: boolean;\n  onWillPreviewOpen?: () => void;\n  onDidPreviewOpen?: () => void;\n  onPreviewWillClose?: () => void;\n  onPreviewDidClose?: () => void;\n  onPreviewTapped?: () => void;\n  onPreviewTappedAnimationCompleted?: () => void;\n  children: React.ReactNode;\n}\nconst NativeLinkPreviewView: React.ComponentType<NativeLinkPreviewProps> | null =\n  areNativeViewsAvailable\n    ? requireNativeView('ExpoRouterNativeLinkPreview', 'NativeLinkPreviewView')\n    : null;\nexport function NativeLinkPreview(props: NativeLinkPreviewProps) {\n  if (!NativeLinkPreviewView) {\n    return null;\n  }\n  return <NativeLinkPreviewView {...props} />;\n}\n// #endregion\n\n// #region Preview Content View\nexport interface NativeLinkPreviewContentProps extends ViewProps {\n  preferredContentSize?: { width: number; height: number };\n}\nconst NativeLinkPreviewContentView: React.ComponentType<NativeLinkPreviewContentProps> | null =\n  areNativeViewsAvailable\n    ? requireNativeView('ExpoRouterNativeLinkPreview', 'NativeLinkPreviewContentView')\n    : null;\n\nexport function NativeLinkPreviewContent(props: NativeLinkPreviewContentProps) {\n  if (!NativeLinkPreviewContentView) {\n    return null;\n  }\n  const style = StyleSheet.flatten([\n    props.style,\n    {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n    } as const,\n  ]);\n  return <NativeLinkPreviewContentView {...props} style={style} />;\n}\n// #endregion\n"],"mappings":";AAAA,YAAY;;AAAC,IAAAA,mBAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA;;;;AAgCbC,OAAA,CAAAC,uBAAA,GAAAA,uBAAA;AAiCAD,OAAA,CAAAE,iBAAA,GAAAA,iBAAA;AAiBAF,OAAA,CAAAG,wBAAA,GAAAA,wBAAA;AAhFA,MAAAC,MAAA,GAAAN,OAAA;AAAyC,MAAAO,cAAA,GAAAP,OAAA;AAGzC,MAAMQ,uBAAuB,GAC3B,SAAiC,CAACD,cAAA,CAAAE,QAAQ,CAACC,IAAI,IAAIC,MAAM,CAACC,aAAa,KAAK,IAAI;AAsBlF,MAAMC,2BAA2B,GAC/BL,uBAAuB,GACnB,IAAAF,MAAA,CAAAQ,iBAAiB,EAAC,6BAA6B,EAAE,6BAA6B,CAAC,GAC/E,IAAI;AACV,SAAgBX,uBAAuBA,CAACY,KAAmC;EACzE,IAAI,CAACF,2BAA2B,EAAE;IAChC,OAAO,IAAI;EACb;EACA,OAAOd,mBAAA,CAAAiB,MAAA,CAACH,2BAA2B,EAAAI,MAAA,CAAAC,MAAA,KAAKH,KAAK;IAAAI,QAAA,EAAAlB,YAAA;IAAAmB,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAG;AACnD;AAACC,EAAA,GALenB,uBAAuB;AA6BvC,MAAMoB,qBAAqB,GACzBf,uBAAuB,GACnB,IAAAF,MAAA,CAAAQ,iBAAiB,EAAC,6BAA6B,EAAE,uBAAuB,CAAC,GACzE,IAAI;AACV,SAAgBV,iBAAiBA,CAACW,KAA6B;EAC7D,IAAI,CAACQ,qBAAqB,EAAE;IAC1B,OAAO,IAAI;EACb;EACA,OAAOxB,mBAAA,CAAAiB,MAAA,CAACO,qBAAqB,EAAAN,MAAA,CAAAC,MAAA,KAAKH,KAAK;IAAAI,QAAA,EAAAlB,YAAA;IAAAmB,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAG;AAC7C;AAACG,GAAA,GALepB,iBAAiB;AAYjC,MAAMqB,4BAA4B,GAChCjB,uBAAuB,GACnB,IAAAF,MAAA,CAAAQ,iBAAiB,EAAC,6BAA6B,EAAE,8BAA8B,CAAC,GAChF,IAAI;AAEV,SAAgBT,wBAAwBA,CAACU,KAAoC;EAC3E,IAAI,CAACU,4BAA4B,EAAE;IACjC,OAAO,IAAI;EACb;EACA,MAAMC,KAAK,GAAGnB,cAAA,CAAAoB,UAAU,CAACC,OAAO,CAAC,CAC/Bb,KAAK,CAACW,KAAK,EACX;IACEG,QAAQ,EAAE,UAAU;IACpBC,GAAG,EAAE,CAAC;IACNC,IAAI,EAAE;GACE,CACX,CAAC;EACF,OAAOhC,mBAAA,CAAAiB,MAAA,CAACS,4BAA4B,EAAAR,MAAA,CAAAC,MAAA,KAAKH,KAAK;IAAEW,KAAK,EAAEA;EAAM;IAAAP,QAAA,EAAAlB,YAAA;IAAAmB,UAAA;IAAAC,YAAA;EAAA,QAAG;AAClE;AAACW,GAAA,GAbe3B,wBAAwB;AAAA,IAAAiB,EAAA,EAAAE,GAAA,EAAAQ,GAAA;AAAAC,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAT,GAAA;AAAAS,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}