{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nif (process.env.NODE_ENV === 'development') {\n  if (typeof __METRO_GLOBAL_PREFIX__ !== 'undefined' && global[__METRO_GLOBAL_PREFIX__ + '__ReactRefresh']) {\n    const Refresh = global[__METRO_GLOBAL_PREFIX__ + '__ReactRefresh'];\n    const isLikelyComponentType = Refresh.isLikelyComponentType;\n    const expoRouterExports = new WeakSet();\n    Object.assign(Refresh, {\n      isLikelyComponentType(value) {\n        try {\n          if (typeof value === 'object') {\n            if ('unstable_settings' in value) {\n              expoRouterExports.add(value.unstable_settings);\n            }\n            if ('ErrorBoundary' in value) {\n              expoRouterExports.add(value.ErrorBoundary);\n            }\n            if ('generateStaticParams' in value) {\n              expoRouterExports.add(value.generateStaticParams);\n            }\n          }\n        } catch {}\n        return expoRouterExports.has(value) || isLikelyComponentType(value);\n      }\n    });\n  }\n}","map":{"version":3,"names":["process","env","NODE_ENV","__METRO_GLOBAL_PREFIX__","global","Refresh","isLikelyComponentType","expoRouterExports","WeakSet","Object","assign","value","add","unstable_settings","ErrorBoundary","generateStaticParams","has"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/fast-refresh.ts"],"sourcesContent":["declare let __METRO_GLOBAL_PREFIX__: string;\n\n/**\n * This is a hack for Expo Router to support Fast Refresh on _layout files\n *\n * Fast Refresh only works when:\n *  - Files only export React Components\n *  - All inverse dependencies only export React Components\n *\n * Expo Router's _layout files support exporting both 'unstable_settings' and 'ErrorBoundary'\n *\n * 'unstable_settings':\n *  - This is a plain object, so it will break Fast Refresh\n *\n * 'ErrorBoundary'\n *  - While this is a React component, it is imported from 'expo-router'\n *  - 'expo-router' has an inverse dependency on _ctx, which is a require.context object\n *\n * 'generateStaticParams'\n *  - This is a function that is not a React Component, so it will break Fast Refresh\n *\n *\n * To resolve this issue, we extend ReactRefresh to flag these exports as React components\n *\n * @see https://reactnative.dev/docs/fast-refresh\n */\nif (process.env.NODE_ENV === 'development') {\n  if (\n    // Should be a string at runtime\n    typeof __METRO_GLOBAL_PREFIX__ !== 'undefined' &&\n    // Should be set by Metro's require polyfill\n    global[__METRO_GLOBAL_PREFIX__ + '__ReactRefresh']\n  ) {\n    // source: https://github.com/facebook/metro/blob/main/packages/metro-runtime/src/polyfills/require.js\n    // TODO(@kitten): Add type for this and use `globalThis` over `global`\n    const Refresh = global[__METRO_GLOBAL_PREFIX__ + '__ReactRefresh'];\n    // Keep a reference to the original\n    const isLikelyComponentType = Refresh.isLikelyComponentType;\n    // Modules can be dereferenced at any time\n    const expoRouterExports = new WeakSet();\n\n    Object.assign(Refresh, {\n      /*\n       * isLikelyComponentType is called twice.\n       *   1. Initially with a modules export object\n       *   2. With each individual export of a module\n       */\n      isLikelyComponentType(value: any) {\n        try {\n          if (typeof value === 'object') {\n            if ('unstable_settings' in value) {\n              expoRouterExports.add(value.unstable_settings);\n            }\n            if ('ErrorBoundary' in value) {\n              expoRouterExports.add(value.ErrorBoundary);\n            }\n            if ('generateStaticParams' in value) {\n              expoRouterExports.add(value.generateStaticParams);\n            }\n          }\n        } catch {\n          // Ignore - we're just trying to avoid breaking Fast Refresh by using exports\n          // that aren't JS objects valid as keys for the WeakSet - like we've seen with\n          // some JSI::HostObject instances that are exported in a module - see #33670\n          // https://github.com/expo/expo/issues/33670\n        }\n        return expoRouterExports.has(value) || isLikelyComponentType(value);\n      },\n    });\n  }\n}\n\n// Export an empty object so TypeScript doesn't consider this an ambient module\nexport {};\n"],"mappings":";;;;;AA0BA,IAAIA,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;EAC1C,IAEE,OAAOC,uBAAuB,KAAK,WAAW,IAE9CC,MAAM,CAACD,uBAAuB,GAAG,gBAAgB,CAAC,EAClD;IAGA,MAAME,OAAO,GAAGD,MAAM,CAACD,uBAAuB,GAAG,gBAAgB,CAAC;IAElE,MAAMG,qBAAqB,GAAGD,OAAO,CAACC,qBAAqB;IAE3D,MAAMC,iBAAiB,GAAG,IAAIC,OAAO,EAAE;IAEvCC,MAAM,CAACC,MAAM,CAACL,OAAO,EAAE;MAMrBC,qBAAqBA,CAACK,KAAU;QAC9B,IAAI;UACF,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;YAC7B,IAAI,mBAAmB,IAAIA,KAAK,EAAE;cAChCJ,iBAAiB,CAACK,GAAG,CAACD,KAAK,CAACE,iBAAiB,CAAC;YAChD;YACA,IAAI,eAAe,IAAIF,KAAK,EAAE;cAC5BJ,iBAAiB,CAACK,GAAG,CAACD,KAAK,CAACG,aAAa,CAAC;YAC5C;YACA,IAAI,sBAAsB,IAAIH,KAAK,EAAE;cACnCJ,iBAAiB,CAACK,GAAG,CAACD,KAAK,CAACI,oBAAoB,CAAC;YACnD;UACF;QACF,CAAC,CAAC,MAAM,CAKR;QACA,OAAOR,iBAAiB,CAACS,GAAG,CAACL,KAAK,CAAC,IAAIL,qBAAqB,CAACK,KAAK,CAAC;MACrE;KACD,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"script","externalDependencies":[]}