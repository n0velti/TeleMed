{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useEffect, useImperativeHandle } from 'react';\nimport { REGISTER_DOM_IMPERATIVE_HANDLE_PROPS } from './injection';\nexport function useDOMImperativeHandle(ref, init, deps) {\n  _s();\n  const isTargetWeb = typeof window.ReactNativeWebView === 'undefined' && typeof window.$$EXPO_INITIAL_PROPS === 'undefined';\n  const stubHandlerFactory = useCallback(() => ({}), deps ?? []);\n  useImperativeHandle(ref, isTargetWeb ? init : stubHandlerFactory, deps);\n  useEffect(() => {\n    if (!isTargetWeb) {\n      globalThis._domRefProxy = init();\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: REGISTER_DOM_IMPERATIVE_HANDLE_PROPS,\n        data: Object.keys(globalThis._domRefProxy)\n      }));\n    }\n    return () => {\n      if (!isTargetWeb) {\n        globalThis._domRefProxy = undefined;\n      }\n    };\n  }, deps);\n}\n_s(useDOMImperativeHandle, \"KRct61qI/V2tvlPVWwXSNeWJ33I=\");","map":{"version":3,"names":["useCallback","useEffect","useImperativeHandle","REGISTER_DOM_IMPERATIVE_HANDLE_PROPS","useDOMImperativeHandle","ref","init","deps","_s","isTargetWeb","window","ReactNativeWebView","$$EXPO_INITIAL_PROPS","stubHandlerFactory","globalThis","_domRefProxy","postMessage","JSON","stringify","type","data","Object","keys","undefined"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo/src/dom/dom-hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useImperativeHandle, type DependencyList, type Ref } from 'react';\n\nimport type { DOMImperativeFactory } from './dom.types';\nimport { REGISTER_DOM_IMPERATIVE_HANDLE_PROPS } from './injection';\n\ndeclare namespace globalThis {\n  let _domRefProxy: undefined | unknown;\n}\n\n/**\n * A React `useImperativeHandle` like hook for DOM components.\n *\n */\nexport function useDOMImperativeHandle<T extends DOMImperativeFactory>(\n  ref: Ref<T>,\n  init: () => T,\n  deps?: DependencyList\n) {\n  const isTargetWeb =\n    // @ts-expect-error: Added via react-native-webview\n    typeof window.ReactNativeWebView === 'undefined' &&\n    // @ts-expect-error: Added via expo/dom\n    typeof window.$$EXPO_INITIAL_PROPS === 'undefined';\n\n  const stubHandlerFactory = useCallback(() => ({}) as T, deps ?? []);\n\n  // This standard useImperativeHandle hook is serving for web\n  useImperativeHandle(ref, isTargetWeb ? init : stubHandlerFactory, deps);\n\n  // This `globalThis._domRefProxy` is serving for native\n  useEffect(() => {\n    if (!isTargetWeb) {\n      globalThis._domRefProxy = init();\n      // TODO(@kitten): Type `ReactNativeWebView` and the message data\n      // @ts-expect-error: Added via react-native-webview\n      window.ReactNativeWebView.postMessage(\n        JSON.stringify({\n          type: REGISTER_DOM_IMPERATIVE_HANDLE_PROPS,\n          data: Object.keys(globalThis._domRefProxy as any),\n        })\n      );\n    }\n    return () => {\n      if (!isTargetWeb) {\n        globalThis._domRefProxy = undefined;\n      }\n    };\n  }, deps);\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,QAAuC,OAAO;AAGlG,SAASC,oCAAoC,QAAQ,aAAa;AAUlE,OAAO,SAASC,sBAAsBA,CACpCC,GAAW,EACXC,IAAa,EACbC,IAAqB,EACrB;EAAAC,EAAA;EACA,MAAMC,WAAW,GAEf,OAAOC,MAAM,CAACC,kBAAkB,KAAK,WAAW,IAEhD,OAAOD,MAAM,CAACE,oBAAoB,KAAK,WAAW;EAEpD,MAAMC,kBAAkB,GAAGb,WAAW,CAAC,OAAO,CAAC,CAAC,CAAM,EAAEO,IAAI,IAAI,EAAE,CAAC;EAGnEL,mBAAmB,CAACG,GAAG,EAAEI,WAAW,GAAGH,IAAI,GAAGO,kBAAkB,EAAEN,IAAI,CAAC;EAGvEN,SAAS,CAAC,MAAM;IACd,IAAI,CAACQ,WAAW,EAAE;MAChBK,UAAU,CAACC,YAAY,GAAGT,IAAI,CAAC,CAAC;MAGhCI,MAAM,CAACC,kBAAkB,CAACK,WAAW,CACnCC,IAAI,CAACC,SAAS,CAAC;QACbC,IAAI,EAAEhB,oCAAoC;QAC1CiB,IAAI,EAAEC,MAAM,CAACC,IAAI,CAACR,UAAU,CAACC,YAAmB;MAClD,CAAC,CACH,CAAC;IACH;IACA,OAAO,MAAM;MACX,IAAI,CAACN,WAAW,EAAE;QAChBK,UAAU,CAACC,YAAY,GAAGQ,SAAS;MACrC;IACF,CAAC;EACH,CAAC,EAAEhB,IAAI,CAAC;AACV;AAACC,EAAA,CAnCeJ,sBAAsB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}