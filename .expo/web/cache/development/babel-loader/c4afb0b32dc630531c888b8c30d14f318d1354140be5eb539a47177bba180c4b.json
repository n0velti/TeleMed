{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useNextScreenId = useNextScreenId;\nconst react_1 = require(\"react\");\nconst LinkPreviewContext_1 = require(\"./LinkPreviewContext\");\nconst utils_1 = require(\"./utils\");\nconst router_store_1 = require(\"../../global-state/router-store\");\nconst hooks_1 = require(\"../../hooks\");\nfunction useNextScreenId() {\n  const router = (0, hooks_1.useRouter)();\n  const {\n    setOpenPreviewKey\n  } = (0, LinkPreviewContext_1.useLinkPreviewContext)();\n  const [internalNextScreenId, internalSetNextScreenId] = (0, react_1.useState)();\n  const currentHref = (0, react_1.useRef)(undefined);\n  const [tabPath, setTabPath] = (0, react_1.useState)([]);\n  (0, react_1.useEffect)(() => {\n    return router_store_1.store.navigationRef.addListener('state', ({\n      data: {\n        state\n      }\n    }) => {\n      if (currentHref.current && state) {\n        const preloadedRoute = (0, utils_1.getPreloadedRouteFromRootStateByHref)(currentHref.current, state);\n        const routeKey = preloadedRoute?.key;\n        const tabPathFromRootState = (0, utils_1.getTabPathFromRootStateByHref)(currentHref.current, state);\n        if (routeKey || tabPathFromRootState.length) {\n          setTimeout(() => {\n            internalSetNextScreenId(routeKey);\n            setOpenPreviewKey(routeKey);\n            setTabPath(tabPathFromRootState);\n          });\n        }\n        currentHref.current = undefined;\n      }\n    });\n  }, []);\n  const prefetch = (0, react_1.useCallback)(href => {\n    internalSetNextScreenId(undefined);\n    router.prefetch(href);\n    currentHref.current = href;\n  }, [router.prefetch]);\n  return [{\n    nextScreenId: internalNextScreenId,\n    tabPath\n  }, prefetch];\n}","map":{"version":3,"names":["exports","useNextScreenId","react_1","require","LinkPreviewContext_1","utils_1","router_store_1","hooks_1","router","useRouter","setOpenPreviewKey","useLinkPreviewContext","internalNextScreenId","internalSetNextScreenId","useState","currentHref","useRef","undefined","tabPath","setTabPath","useEffect","store","navigationRef","addListener","data","state","current","preloadedRoute","getPreloadedRouteFromRootStateByHref","routeKey","key","tabPathFromRootState","getTabPathFromRootStateByHref","length","setTimeout","prefetch","useCallback","href","nextScreenId"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/link/preview/useNextScreenId.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { useLinkPreviewContext } from './LinkPreviewContext';\nimport { TabPath } from './native';\nimport { getPreloadedRouteFromRootStateByHref, getTabPathFromRootStateByHref } from './utils';\nimport { store } from '../../global-state/router-store';\nimport { useRouter } from '../../hooks';\nimport { Href } from '../../types';\n\nexport function useNextScreenId(): [\n  { nextScreenId: string | undefined; tabPath: TabPath[] },\n  (href: Href) => void,\n] {\n  const router = useRouter();\n  const { setOpenPreviewKey } = useLinkPreviewContext();\n  const [internalNextScreenId, internalSetNextScreenId] = useState<string | undefined>();\n  const currentHref = useRef<Href | undefined>(undefined);\n  const [tabPath, setTabPath] = useState<TabPath[]>([]);\n\n  useEffect(() => {\n    // When screen is prefetched, then the root state is updated with the preloaded route.\n    return store.navigationRef.addListener('state', ({ data: { state } }) => {\n      // If we have the current href, it means that we prefetched the route\n      if (currentHref.current && state) {\n        const preloadedRoute = getPreloadedRouteFromRootStateByHref(currentHref.current, state);\n        const routeKey = preloadedRoute?.key;\n        const tabPathFromRootState = getTabPathFromRootStateByHref(currentHref.current, state);\n        // Without this timeout react-native does not have enough time to mount the new screen\n        // and thus it will not be found on the native side\n        if (routeKey || tabPathFromRootState.length) {\n          setTimeout(() => {\n            internalSetNextScreenId(routeKey);\n            setOpenPreviewKey(routeKey);\n            setTabPath(tabPathFromRootState);\n          });\n        }\n        // We got the preloaded state, so we can reset the currentHref\n        // to prevent unnecessary processing\n        currentHref.current = undefined;\n      }\n    });\n  }, []);\n\n  const prefetch = useCallback(\n    (href: Href): void => {\n      // Resetting the nextScreenId to undefined\n      internalSetNextScreenId(undefined);\n      router.prefetch(href);\n      currentHref.current = href;\n    },\n    [router.prefetch]\n  );\n  return [{ nextScreenId: internalNextScreenId, tabPath }, prefetch];\n}\n"],"mappings":";;;;;AASAA,OAAA,CAAAC,eAAA,GAAAA,eAAA;AATA,MAAAC,OAAA,GAAAC,OAAA;AAEA,MAAAC,oBAAA,GAAAD,OAAA;AAEA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,cAAA,GAAAH,OAAA;AACA,MAAAI,OAAA,GAAAJ,OAAA;AAGA,SAAgBF,eAAeA,CAAA;EAI7B,MAAMO,MAAM,GAAG,IAAAD,OAAA,CAAAE,SAAS,GAAE;EAC1B,MAAM;IAAEC;EAAiB,CAAE,GAAG,IAAAN,oBAAA,CAAAO,qBAAqB,GAAE;EACrD,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG,IAAAX,OAAA,CAAAY,QAAQ,GAAsB;EACtF,MAAMC,WAAW,GAAG,IAAAb,OAAA,CAAAc,MAAM,EAAmBC,SAAS,CAAC;EACvD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAG,IAAAjB,OAAA,CAAAY,QAAQ,EAAY,EAAE,CAAC;EAErD,IAAAZ,OAAA,CAAAkB,SAAS,EAAC,MAAK;IAEb,OAAOd,cAAA,CAAAe,KAAK,CAACC,aAAa,CAACC,WAAW,CAAC,OAAO,EAAE,CAAC;MAAEC,IAAI,EAAE;QAAEC;MAAK;IAAE,CAAE,KAAI;MAEtE,IAAIV,WAAW,CAACW,OAAO,IAAID,KAAK,EAAE;QAChC,MAAME,cAAc,GAAG,IAAAtB,OAAA,CAAAuB,oCAAoC,EAACb,WAAW,CAACW,OAAO,EAAED,KAAK,CAAC;QACvF,MAAMI,QAAQ,GAAGF,cAAc,EAAEG,GAAG;QACpC,MAAMC,oBAAoB,GAAG,IAAA1B,OAAA,CAAA2B,6BAA6B,EAACjB,WAAW,CAACW,OAAO,EAAED,KAAK,CAAC;QAGtF,IAAII,QAAQ,IAAIE,oBAAoB,CAACE,MAAM,EAAE;UAC3CC,UAAU,CAAC,MAAK;YACdrB,uBAAuB,CAACgB,QAAQ,CAAC;YACjCnB,iBAAiB,CAACmB,QAAQ,CAAC;YAC3BV,UAAU,CAACY,oBAAoB,CAAC;UAClC,CAAC,CAAC;QACJ;QAGAhB,WAAW,CAACW,OAAO,GAAGT,SAAS;MACjC;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,QAAQ,GAAG,IAAAjC,OAAA,CAAAkC,WAAW,EACzBC,IAAU,IAAU;IAEnBxB,uBAAuB,CAACI,SAAS,CAAC;IAClCT,MAAM,CAAC2B,QAAQ,CAACE,IAAI,CAAC;IACrBtB,WAAW,CAACW,OAAO,GAAGW,IAAI;EAC5B,CAAC,EACD,CAAC7B,MAAM,CAAC2B,QAAQ,CAAC,CAClB;EACD,OAAO,CAAC;IAAEG,YAAY,EAAE1B,oBAAoB;IAAEM;EAAO,CAAE,EAAEiB,QAAQ,CAAC;AACpE","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}