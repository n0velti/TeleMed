{"ast":null,"code":"\"use strict\";\n\nvar _reactJsxDevRuntime = require(\"react/jsx-dev-runtime\");\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"id\", \"initialRouteName\", \"children\", \"layout\", \"screenListeners\", \"screenOptions\", \"screenLayout\", \"UNSTABLE_router\"];\nvar _jsxFileName = \"/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/build/fork/native-stack/createNativeStackNavigator.js\",\n  _s = $RefreshSig$();\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNativeStackNavigator = createNativeStackNavigator;\nconst native_1 = require(\"@react-navigation/native\");\nconst native_stack_1 = require(\"@react-navigation/native-stack\");\nconst React = __importStar(require(\"react\"));\nconst LinkPreviewContext_1 = require(\"../../link/preview/LinkPreviewContext\");\nfunction NativeStackNavigator(_ref) {\n  _s();\n  let {\n      id,\n      initialRouteName,\n      children,\n      layout,\n      screenListeners,\n      screenOptions,\n      screenLayout,\n      UNSTABLE_router\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const {\n    state,\n    describe,\n    descriptors,\n    navigation,\n    NavigationContent\n  } = (0, native_1.useNavigationBuilder)(native_1.StackRouter, {\n    id,\n    initialRouteName,\n    children,\n    layout,\n    screenListeners,\n    screenOptions,\n    screenLayout,\n    UNSTABLE_router\n  });\n  React.useEffect(() => navigation?.addListener?.('tabPress', e => {\n    const isFocused = navigation.isFocused();\n    requestAnimationFrame(() => {\n      if (state.index > 0 && isFocused && !e.defaultPrevented) {\n        navigation.dispatch(Object.assign({}, native_1.StackActions.popToTop(), {\n          target: state.key\n        }));\n      }\n    });\n  }), [navigation, state.index, state.key]);\n  const {\n    openPreviewKey,\n    setOpenPreviewKey\n  } = (0, LinkPreviewContext_1.useLinkPreviewContext)();\n  const [previewTransitioningScreenId, setPreviewTransitioningScreenId] = React.useState();\n  React.useEffect(() => {\n    if (previewTransitioningScreenId) {\n      if (state.routes.some(route => route.key === previewTransitioningScreenId)) {\n        setPreviewTransitioningScreenId(undefined);\n      }\n    }\n  }, [state, previewTransitioningScreenId]);\n  const navigationWrapper = React.useMemo(() => {\n    if (openPreviewKey) {\n      const emit = (...args) => {\n        const {\n          target,\n          type,\n          data\n        } = args[0];\n        if (target === openPreviewKey && data && 'closing' in data && !data.closing) {\n          if (type === 'transitionStart') {\n            setPreviewTransitioningScreenId(openPreviewKey);\n          } else if (type === 'transitionEnd') {\n            setOpenPreviewKey(undefined);\n          }\n        }\n        return navigation.emit(...args);\n      };\n      return Object.assign({}, navigation, {\n        emit\n      });\n    }\n    return navigation;\n  }, [navigation, openPreviewKey, setOpenPreviewKey]);\n  const {\n    computedState,\n    computedDescriptors\n  } = React.useMemo(() => {\n    if (previewTransitioningScreenId) {\n      const preloadedRoute = state.preloadedRoutes.find(route => route.key === previewTransitioningScreenId);\n      if (preloadedRoute) {\n        const newState = Object.assign({}, state, {\n          preloadedRoutes: state.preloadedRoutes.filter(route => route.key !== previewTransitioningScreenId),\n          routes: [...state.routes, preloadedRoute],\n          index: state.index + 1\n        });\n        const newDescriptors = previewTransitioningScreenId in descriptors ? descriptors : Object.assign({}, descriptors, {\n          [previewTransitioningScreenId]: describe(preloadedRoute, true)\n        });\n        return {\n          computedState: newState,\n          computedDescriptors: newDescriptors\n        };\n      }\n    }\n    return {\n      computedState: state,\n      computedDescriptors: descriptors\n    };\n  }, [state, previewTransitioningScreenId, describe, descriptors]);\n  return _reactJsxDevRuntime.jsxDEV(NavigationContent, {\n    children: _reactJsxDevRuntime.jsxDEV(native_stack_1.NativeStackView, Object.assign({}, rest, {\n      state: computedState,\n      navigation: navigationWrapper,\n      descriptors: computedDescriptors,\n      describe: describe\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 13\n  }, this);\n}\n_s(NativeStackNavigator, \"3Wwnkkjo1Ufj8/TkRvyliNAmjkc=\");\n_c = NativeStackNavigator;\nfunction createNativeStackNavigator(config) {\n  return (0, native_1.createNavigatorFactory)(NativeStackNavigator)(config);\n}\nvar _c;\n$RefreshReg$(_c, \"NativeStackNavigator\");","map":{"version":3,"names":["exports","createNativeStackNavigator","native_1","require","native_stack_1","React","__importStar","LinkPreviewContext_1","NativeStackNavigator","_ref","_s","id","initialRouteName","children","layout","screenListeners","screenOptions","screenLayout","UNSTABLE_router","rest","_objectWithoutPropertiesLoose","_excluded","state","describe","descriptors","navigation","NavigationContent","useNavigationBuilder","StackRouter","useEffect","addListener","e","isFocused","requestAnimationFrame","index","defaultPrevented","dispatch","Object","assign","StackActions","popToTop","target","key","openPreviewKey","setOpenPreviewKey","useLinkPreviewContext","previewTransitioningScreenId","setPreviewTransitioningScreenId","useState","routes","some","route","undefined","navigationWrapper","useMemo","emit","args","type","data","closing","computedState","computedDescriptors","preloadedRoute","preloadedRoutes","find","newState","filter","newDescriptors","_reactJsxDevRuntime","jsxDEV","NativeStackView","fileName","_jsxFileName","lineNumber","columnNumber","_c","config","createNavigatorFactory","$RefreshReg$"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/fork/native-stack/createNativeStackNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  type EventArg,\n  type NavigatorTypeBagBase,\n  type ParamListBase,\n  type StackActionHelpers,\n  StackActions,\n  type StackNavigationState,\n  StackRouter,\n  type StackRouterOptions,\n  type StaticConfig,\n  type TypedNavigator,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport {\n  type NativeStackNavigationEventMap,\n  type NativeStackNavigationOptions,\n  type NativeStackNavigationProp,\n  NativeStackView,\n  type NativeStackNavigatorProps,\n} from '@react-navigation/native-stack';\nimport * as React from 'react';\n\nimport { useLinkPreviewContext } from '../../link/preview/LinkPreviewContext';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  layout,\n  screenListeners,\n  screenOptions,\n  screenLayout,\n  UNSTABLE_router,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, describe, descriptors, navigation, NavigationContent } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    id,\n    initialRouteName,\n    children,\n    layout,\n    screenListeners,\n    screenOptions,\n    screenLayout,\n    UNSTABLE_router,\n  });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (state.index > 0 && isFocused && !(e as EventArg<'tabPress', true>).defaultPrevented) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  // START FORK\n  const { openPreviewKey, setOpenPreviewKey } = useLinkPreviewContext();\n\n  // This is used to track the preview screen that is currently transitioning on the native side\n  const [previewTransitioningScreenId, setPreviewTransitioningScreenId] = React.useState<\n    string | undefined\n  >();\n\n  React.useEffect(() => {\n    if (previewTransitioningScreenId) {\n      // This means that the state was updated after the preview transition\n      if (state.routes.some((route) => route.key === previewTransitioningScreenId)) {\n        // We no longer need to track the preview transitioning screen\n        setPreviewTransitioningScreenId(undefined);\n      }\n    }\n  }, [state, previewTransitioningScreenId]);\n\n  const navigationWrapper = React.useMemo(() => {\n    if (openPreviewKey) {\n      const emit: (typeof navigation)['emit'] = (...args) => {\n        const { target, type, data } = args[0];\n        if (target === openPreviewKey && data && 'closing' in data && !data.closing) {\n          // onWillAppear\n          if (type === 'transitionStart') {\n            // The screen from preview will appear, so we need to start tracking it\n            setPreviewTransitioningScreenId(openPreviewKey);\n          }\n          // onAppear\n          else if (type === 'transitionEnd') {\n            // The screen from preview appeared.\n            // We can now restore the stack animation\n            setOpenPreviewKey(undefined);\n          }\n        }\n        return navigation.emit(...args);\n      };\n      return {\n        ...navigation,\n        emit,\n      };\n    }\n    return navigation;\n  }, [navigation, openPreviewKey, setOpenPreviewKey]);\n\n  const { computedState, computedDescriptors } = React.useMemo(() => {\n    // The preview screen was pushed on the native side, but react-navigation state was not updated yet\n    if (previewTransitioningScreenId) {\n      const preloadedRoute = state.preloadedRoutes.find(\n        (route) => route.key === previewTransitioningScreenId\n      );\n      if (preloadedRoute) {\n        const newState = {\n          ...state,\n          // On native side the screen is already pushed, so we need to update the state\n          preloadedRoutes: state.preloadedRoutes.filter(\n            (route) => route.key !== previewTransitioningScreenId\n          ),\n          routes: [...state.routes, preloadedRoute],\n          index: state.index + 1,\n        };\n\n        const newDescriptors =\n          previewTransitioningScreenId in descriptors\n            ? descriptors\n            : {\n                ...descriptors,\n                // We need to add the descriptor. For react-navigation this is still preloaded screen\n                // Replicating the logic from https://github.com/react-navigation/react-navigation/blob/eaf1100ac7d99cb93ba11a999549dd0752809a78/packages/native-stack/src/views/NativeStackView.native.tsx#L489\n                [previewTransitioningScreenId]: describe(preloadedRoute, true),\n              };\n\n        return {\n          computedState: newState,\n          computedDescriptors: newDescriptors,\n        };\n      }\n    }\n    return {\n      computedState: state,\n      computedDescriptors: descriptors,\n    };\n  }, [state, previewTransitioningScreenId, describe, descriptors]);\n  // END FORK\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        // START FORK\n        state={computedState}\n        navigation={navigationWrapper}\n        descriptors={computedDescriptors}\n        // state={state}\n        // navigation={navigation}\n        // descriptors={descriptors}\n        // END FORK\n        describe={describe}\n      />\n    </NavigationContent>\n  );\n}\n\nexport function createNativeStackNavigator<\n  const ParamList extends ParamListBase,\n  const NavigatorID extends string | undefined = undefined,\n  const TypeBag extends NavigatorTypeBagBase = {\n    ParamList: ParamList;\n    NavigatorID: NavigatorID;\n    State: StackNavigationState<ParamList>;\n    ScreenOptions: NativeStackNavigationOptions;\n    EventMap: NativeStackNavigationEventMap;\n    NavigationList: {\n      [RouteName in keyof ParamList]: NativeStackNavigationProp<ParamList, RouteName, NavigatorID>;\n    };\n    Navigator: typeof NativeStackNavigator;\n  },\n  const Config extends StaticConfig<TypeBag> = StaticConfig<TypeBag>,\n>(config?: Config): TypedNavigator<TypeBag, Config> {\n  return createNavigatorFactory(NativeStackNavigator)(config);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}