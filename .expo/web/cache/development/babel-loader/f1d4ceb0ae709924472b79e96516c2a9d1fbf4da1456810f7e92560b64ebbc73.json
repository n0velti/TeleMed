{"ast":null,"code":"\"use strict\";\n'use client';\n\nvar _reactJsxDevRuntime = require(\"react/jsx-dev-runtime\");\nvar _jsxFileName = \"/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/build/Route.js\",\n  _s = $RefreshSig$();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortRoutes = exports.sortRoutesWithInitial = exports.LocalRouteParamsContext = void 0;\nexports.useRouteNode = useRouteNode;\nexports.useContextKey = useContextKey;\nexports.Route = Route;\nconst react_1 = require(\"react\");\nconst matchers_1 = require(\"./matchers\");\nconst sortRoutes_1 = require(\"./sortRoutes\");\nObject.defineProperty(exports, \"sortRoutesWithInitial\", {\n  enumerable: true,\n  get: function () {\n    return sortRoutes_1.sortRoutesWithInitial;\n  }\n});\nObject.defineProperty(exports, \"sortRoutes\", {\n  enumerable: true,\n  get: function () {\n    return sortRoutes_1.sortRoutes;\n  }\n});\nconst CurrentRouteContext = (0, react_1.createContext)(null);\nexports.LocalRouteParamsContext = (0, react_1.createContext)({});\nif (process.env.NODE_ENV !== 'production') {\n  CurrentRouteContext.displayName = 'RouteNode';\n}\nfunction useRouteNode() {\n  return (0, react_1.use)(CurrentRouteContext);\n}\nfunction useContextKey() {\n  _s();\n  const node = useRouteNode();\n  if (node == null) {\n    throw new Error('No filename found. This is likely a bug in expo-router.');\n  }\n  return (0, matchers_1.getContextKey)(node.contextKey);\n}\n_s(useContextKey, \"7ZetdCNVELaJ9aBJNSYc/gb/Vpc=\", false, function () {\n  return [useRouteNode];\n});\nfunction Route({\n  children,\n  node,\n  route\n}) {\n  return _reactJsxDevRuntime.jsxDEV(exports.LocalRouteParamsContext.Provider, {\n    value: route?.params,\n    children: _reactJsxDevRuntime.jsxDEV(CurrentRouteContext.Provider, {\n      value: node,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 13\n  }, this);\n}\n_c = Route;\nvar _c;\n$RefreshReg$(_c, \"Route\");","map":{"version":3,"names":["_reactJsxDevRuntime","require","_jsxFileName","_s","$RefreshSig$","exports","useRouteNode","useContextKey","Route","react_1","matchers_1","sortRoutes_1","Object","defineProperty","enumerable","get","sortRoutesWithInitial","sortRoutes","CurrentRouteContext","createContext","LocalRouteParamsContext","process","env","NODE_ENV","displayName","use","node","Error","getContextKey","contextKey","children","route","jsxDEV","Provider","value","params","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/Route.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, use, type ComponentType, type PropsWithChildren } from 'react';\n\nimport { getContextKey } from './matchers';\nimport { sortRoutesWithInitial, sortRoutes } from './sortRoutes';\nimport { type ErrorBoundaryProps } from './views/Try';\n\nexport type DynamicConvention = { name: string; deep: boolean; notFound?: boolean };\n\nexport type LoadedRoute = {\n  ErrorBoundary?: ComponentType<ErrorBoundaryProps>;\n  default?: ComponentType<any>;\n  unstable_settings?: Record<string, any>;\n  getNavOptions?: (args: any) => any;\n  generateStaticParams?: (props: {\n    params?: Record<string, string | string[]>;\n  }) => Record<string, string | string[]>[];\n};\n\nexport type LoadedMiddleware = Pick<LoadedRoute, 'default' | 'unstable_settings'>;\n\nexport type MiddlewareNode = {\n  /** Context Module ID. Used to resolve the middleware module */\n  contextKey: string;\n  /** Loads middleware into memory. Returns the exports from +middleware.ts */\n  loadRoute: () => Partial<LoadedMiddleware>;\n};\n\nexport type RouteNode = {\n  /** The type of RouteNode */\n  type: 'route' | 'api' | 'layout' | 'redirect' | 'rewrite';\n  /** Load a route into memory. Returns the exports from a route. */\n  loadRoute: () => Partial<LoadedRoute>;\n  /** Loaded initial route name. */\n  initialRouteName?: string;\n  /** Nested routes */\n  children: RouteNode[];\n  /** Is the route a dynamic path */\n  dynamic: null | DynamicConvention[];\n  /** `index`, `error-boundary`, etc. */\n  route: string;\n  /** Context Module ID, used for matching children. */\n  contextKey: string;\n  /** Redirect Context Module ID, used for matching children. */\n  destinationContextKey?: string;\n  /** Is the redirect permanent. */\n  permanent?: boolean;\n  /** Added in-memory */\n  generated?: boolean;\n  /** Internal screens like the directory or the auto 404 should be marked as internal. */\n  internal?: boolean;\n  /** File paths for async entry modules that should be included in the initial chunk request to ensure the runtime JavaScript matches the statically rendered HTML representation. */\n  entryPoints?: string[];\n  /** HTTP methods for this route. If undefined, assumed to be ['GET'] */\n  methods?: string[];\n  /** Middleware function for server-side request processing. Only present on the root route node. */\n  middleware?: MiddlewareNode;\n};\n\nconst CurrentRouteContext = createContext<RouteNode | null>(null);\nexport const LocalRouteParamsContext = createContext<\n  Record<string, string | undefined> | undefined\n>({});\n\nif (process.env.NODE_ENV !== 'production') {\n  CurrentRouteContext.displayName = 'RouteNode';\n}\n\n/** Return the RouteNode at the current contextual boundary. */\nexport function useRouteNode(): RouteNode | null {\n  return use(CurrentRouteContext);\n}\n\nexport function useContextKey(): string {\n  const node = useRouteNode();\n  if (node == null) {\n    throw new Error('No filename found. This is likely a bug in expo-router.');\n  }\n  return getContextKey(node.contextKey);\n}\n\nexport type RouteProps = PropsWithChildren<{\n  node: RouteNode;\n  route?: { params: Record<string, string | undefined> };\n}>;\n\n/** Provides the matching routes and filename to the children. */\nexport function Route({ children, node, route }: RouteProps) {\n  return (\n    <LocalRouteParamsContext.Provider value={route?.params}>\n      <CurrentRouteContext.Provider value={node}>{children}</CurrentRouteContext.Provider>\n    </LocalRouteParamsContext.Provider>\n  );\n}\n\nexport { sortRoutesWithInitial, sortRoutes };\n"],"mappings":";AAAA,YAAY;;AAAC,IAAAA,mBAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA;EAAAC,EAAA,GAAAC,YAAA;;;;;AAsEbC,OAAA,CAAAC,YAAA,GAAAA,YAAA;AAIAD,OAAA,CAAAE,aAAA,GAAAA,aAAA;AAcAF,OAAA,CAAAG,KAAA,GAAAA,KAAA;AAtFA,MAAAC,OAAA,GAAAR,OAAA;AAEA,MAAAS,UAAA,GAAAT,OAAA;AACA,MAAAU,YAAA,GAAAV,OAAA;AA2FSW,MAAA,CAAAC,cAAA,CAAAR,OAAA;EAAAS,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OA3FAJ,YAAA,CAAAK,qBAAqB;EAAA;AAAA;AA2FEJ,MAAA,CAAAC,cAAA,CAAAR,OAAA;EAAAS,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OA3FAJ,YAAA,CAAAM,UAAU;EAAA;AAAA;AAuD1C,MAAMC,mBAAmB,GAAG,IAAAT,OAAA,CAAAU,aAAa,EAAmB,IAAI,CAAC;AACpDd,OAAA,CAAAe,uBAAuB,GAAG,IAAAX,OAAA,CAAAU,aAAa,EAElD,EAAE,CAAC;AAEL,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCL,mBAAmB,CAACM,WAAW,GAAG,WAAW;AAC/C;AAGA,SAAgBlB,YAAYA,CAAA;EAC1B,OAAO,IAAAG,OAAA,CAAAgB,GAAG,EAACP,mBAAmB,CAAC;AACjC;AAEA,SAAgBX,aAAaA,CAAA;EAAAJ,EAAA;EAC3B,MAAMuB,IAAI,GAAGpB,YAAY,EAAE;EAC3B,IAAIoB,IAAI,IAAI,IAAI,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yDAAyD,CAAC;EAC5E;EACA,OAAO,IAAAjB,UAAA,CAAAkB,aAAa,EAACF,IAAI,CAACG,UAAU,CAAC;AACvC;AAAC1B,EAAA,CANeI,aAAa;EAAA,QACdD,YAAY;AAAA;AAa3B,SAAgBE,KAAKA,CAAC;EAAEsB,QAAQ;EAAEJ,IAAI;EAAEK;AAAK,CAAc;EACzD,OACE/B,mBAAA,CAAAgC,MAAA,CAAC3B,OAAA,CAAAe,uBAAuB,CAACa,QAAQ;IAACC,KAAK,EAAEH,KAAK,EAAEI,MAAO;IAAAL,QAAA,EACrD9B,mBAAA,CAAAgC,MAAA,CAACd,mBAAmB,CAACe,QAAQ;MAACC,KAAK,EAAER,IAAK;MAAAI,QAAA,EAAEA;IAAQ;MAAAM,QAAA,EAAAlC,YAAA;MAAAmC,UAAA;MAAAC,YAAA;IAAA,OAA+B;EACrF;IAAAF,QAAA,EAAAlC,YAAA;IAAAmC,UAAA;IAAAC,YAAA;EAAA,OAAkC,CAAC;AAEvC;AAACC,EAAA,GANe/B,KAAK;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}