{"ast":null,"code":"var _jsxFileName = \"/Users/edward/Documents/TeleMed/TeleMed/node_modules/@expo/metro-runtime/src/error-overlay/overlay/LogBoxInspectorStackFrame.tsx\";\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { LogBoxButton } from '../UI/LogBoxButton';\nimport * as LogBoxStyle from '../UI/LogBoxStyle';\nimport { CODE_FONT } from '../UI/constants';\nimport { getStackFormattedLocation } from '../formatProjectFilePath';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LogBoxInspectorStackFrame(props) {\n  const {\n    frame,\n    onPress\n  } = props;\n  const location = getStackFormattedLocation(\"/Users/edward/Documents/TeleMed/TeleMed\", frame);\n  return _jsxDEV(View, {\n    style: styles.frameContainer,\n    children: _jsxDEV(LogBoxButton, {\n      backgroundColor: {\n        default: 'transparent',\n        pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent'\n      },\n      onPress: onPress,\n      style: styles.frame,\n      children: [_jsxDEV(Text, {\n        style: [styles.name, frame.collapse === true && styles.dim],\n        children: frame.methodName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), _jsxDEV(Text, {\n        ellipsizeMode: \"middle\",\n        numberOfLines: 1,\n        style: [styles.location, frame.collapse === true && styles.dim],\n        children: location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_c = LogBoxInspectorStackFrame;\nconst styles = StyleSheet.create({\n  frameContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 15\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5\n  },\n  lineLocation: {\n    flexDirection: 'row'\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    fontFamily: CODE_FONT\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: '300'\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});\nvar _c;\n$RefreshReg$(_c, \"LogBoxInspectorStackFrame\");","map":{"version":3,"names":["React","StyleSheet","Text","View","LogBoxButton","LogBoxStyle","CODE_FONT","getStackFormattedLocation","jsxDEV","_jsxDEV","LogBoxInspectorStackFrame","props","frame","onPress","location","style","styles","frameContainer","children","backgroundColor","default","pressed","getBackgroundColor","name","collapse","dim","methodName","fileName","_jsxFileName","lineNumber","columnNumber","ellipsizeMode","numberOfLines","_c","create","flexDirection","paddingHorizontal","flex","paddingVertical","borderRadius","lineLocation","color","getTextColor","fontSize","includeFontPadding","lineHeight","fontWeight","fontFamily","paddingLeft","line","$RefreshReg$"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/@expo/metro-runtime/src/error-overlay/overlay/LogBoxInspectorStackFrame.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport type { GestureResponderEvent } from 'react-native';\nimport { StackFrame } from 'stacktrace-parser';\n\nimport { LogBoxButton } from '../UI/LogBoxButton';\nimport * as LogBoxStyle from '../UI/LogBoxStyle';\nimport { CODE_FONT } from '../UI/constants';\nimport { getStackFormattedLocation } from '../formatProjectFilePath';\n\ndeclare const process: any;\n\ntype Props = {\n  frame: StackFrame & { collapse?: boolean };\n  onPress?: (event: GestureResponderEvent) => void;\n};\n\nexport function LogBoxInspectorStackFrame(props: Props) {\n  const { frame, onPress } = props;\n  const location = getStackFormattedLocation(process.env.EXPO_PROJECT_ROOT, frame);\n  return (\n    <View style={styles.frameContainer}>\n      <LogBoxButton\n        backgroundColor={{\n          default: 'transparent',\n          pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : 'transparent',\n        }}\n        onPress={onPress}\n        style={styles.frame}>\n        <Text style={[styles.name, frame.collapse === true && styles.dim]}>{frame.methodName}</Text>\n        <Text\n          ellipsizeMode=\"middle\"\n          numberOfLines={1}\n          style={[styles.location, frame.collapse === true && styles.dim]}>\n          {location}\n        </Text>\n      </LogBoxButton>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  frameContainer: {\n    flexDirection: 'row',\n    paddingHorizontal: 15,\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5,\n  },\n  lineLocation: {\n    flexDirection: 'row',\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: '400',\n    fontFamily: CODE_FONT,\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10,\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: '300',\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: '300',\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}