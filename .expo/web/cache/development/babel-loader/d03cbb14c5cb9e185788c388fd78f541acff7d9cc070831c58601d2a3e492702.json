{"ast":null,"code":"import invariant from 'invariant';\nconst listeners = [];\nexport default {\n  addEventListener(type, listener) {\n    if (typeof window === 'undefined') {\n      return {\n        remove() {}\n      };\n    }\n    invariant(type === 'url', `Linking.addEventListener(): ${type} is not a valid event`);\n    const nativeListener = nativeEvent => listener({\n      url: window.location.href,\n      nativeEvent\n    });\n    listeners.push({\n      listener,\n      nativeListener\n    });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: () => {\n        this.removeEventListener(type, listener);\n      }\n    };\n  },\n  removeEventListener(type, listener) {\n    if (typeof window === 'undefined') {\n      return;\n    }\n    invariant(type === 'url', `Linking.addEventListener(): ${type} is not a valid event`);\n    const listenerIndex = listeners.findIndex(pair => pair.listener === listener);\n    invariant(listenerIndex !== -1, 'Linking.removeEventListener(): cannot remove an unregistered event listener.');\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n  async canOpenURL() {\n    return true;\n  },\n  async getInitialURL() {\n    if (typeof window === 'undefined') return '';\n    return window.location.href;\n  },\n  async openURL(url) {\n    if (typeof window !== 'undefined') {\n      window.location = new URL(url, window.location).toString();\n    }\n  }\n};","map":{"version":3,"names":["invariant","listeners","addEventListener","type","listener","window","remove","nativeListener","nativeEvent","url","location","href","push","removeEventListener","listenerIndex","findIndex","pair","splice","canOpenURL","getInitialURL","openURL","URL","toString"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-linking/src/RNLinking.web.ts"],"sourcesContent":["import invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): { remove(): void } {\n    // Do nothing in Node.js environments\n    if (typeof window === 'undefined') {\n      return { remove() {} };\n    }\n\n    invariant(type === 'url', `Linking.addEventListener(): ${type} is not a valid event`);\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: () => {\n        this.removeEventListener(type, listener);\n      },\n    };\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    // Do nothing in Node.js environments\n    if (typeof window === 'undefined') {\n      return;\n    }\n    invariant(type === 'url', `Linking.addEventListener(): ${type} is not a valid event`);\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (typeof window === 'undefined') return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (typeof window !== 'undefined') {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AAIjC,MAAMC,SAAS,GAAmE,EAAE;AAEpF,eAAe;EACbC,gBAAgBA,CAACC,IAAW,EAAEC,QAAqB;IAEjD,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MACjC,OAAO;QAAEC,MAAMA,CAAA,GAAI;MAAC,CAAE;IACxB;IAEAN,SAAS,CAACG,IAAI,KAAK,KAAK,EAAE,+BAA+BA,IAAI,uBAAuB,CAAC;IACrF,MAAMI,cAAc,GAAuBC,WAAW,IACpDJ,QAAQ,CAAC;MAAEK,GAAG,EAAEJ,MAAM,CAACK,QAAQ,CAACC,IAAI;MAAEH;IAAW,CAAE,CAAC;IACtDP,SAAS,CAACW,IAAI,CAAC;MAAER,QAAQ;MAAEG;IAAc,CAAE,CAAC;IAC5CF,MAAM,CAACH,gBAAgB,CAAC,SAAS,EAAEK,cAAc,EAAE,KAAK,CAAC;IACzD,OAAO;MACLD,MAAM,EAAEA,CAAA,KAAK;QACX,IAAI,CAACO,mBAAmB,CAACV,IAAI,EAAEC,QAAQ,CAAC;MAC1C;KACD;EACH,CAAC;EAEDS,mBAAmBA,CAACV,IAAW,EAAEC,QAAqB;IAEpD,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MACjC;IACF;IACAL,SAAS,CAACG,IAAI,KAAK,KAAK,EAAE,+BAA+BA,IAAI,uBAAuB,CAAC;IACrF,MAAMW,aAAa,GAAGb,SAAS,CAACc,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACZ,QAAQ,KAAKA,QAAQ,CAAC;IAC/EJ,SAAS,CACPc,aAAa,KAAK,CAAC,CAAC,EACpB,8EAA8E,CAC/E;IACD,MAAMP,cAAc,GAAGN,SAAS,CAACa,aAAa,CAAC,CAACP,cAAc;IAC9DF,MAAM,CAACQ,mBAAmB,CAAC,SAAS,EAAEN,cAAc,EAAE,KAAK,CAAC;IAC5DN,SAAS,CAACgB,MAAM,CAACH,aAAa,EAAE,CAAC,CAAC;EACpC,CAAC;EAED,MAAMI,UAAUA,CAAA;IAEd,OAAO,IAAI;EACb,CAAC;EAED,MAAMC,aAAaA,CAAA;IACjB,IAAI,OAAOd,MAAM,KAAK,WAAW,EAAE,OAAO,EAAE;IAC5C,OAAOA,MAAM,CAACK,QAAQ,CAACC,IAAI;EAC7B,CAAC;EAED,MAAMS,OAAOA,CAACX,GAAW;IACvB,IAAI,OAAOJ,MAAM,KAAK,WAAW,EAAE;MAEjCA,MAAM,CAACK,QAAQ,GAAG,IAAIW,GAAG,CAACZ,GAAG,EAAEJ,MAAM,CAACK,QAAQ,CAAC,CAACY,QAAQ,EAAE;IAC5D;EACF;CACD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}