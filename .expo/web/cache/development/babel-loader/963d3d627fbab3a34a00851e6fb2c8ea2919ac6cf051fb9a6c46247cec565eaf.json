{"ast":null,"code":"\"use strict\";\n'use client';\n\nvar _s = $RefreshSig$();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRouteInfo = void 0;\nexports.useRootNavigationState = useRootNavigationState;\nexports.useRootNavigation = useRootNavigation;\nexports.useNavigationContainerRef = useNavigationContainerRef;\nexports.useRouter = useRouter;\nexports.useUnstableGlobalHref = useUnstableGlobalHref;\nexports.useSegments = useSegments;\nexports.usePathname = usePathname;\nexports.useGlobalSearchParams = useGlobalSearchParams;\nexports.useLocalSearchParams = useLocalSearchParams;\nexports.useSearchParams = useSearchParams;\nconst native_1 = require(\"@react-navigation/native\");\nconst react_1 = __importDefault(require(\"react\"));\nconst Route_1 = require(\"./Route\");\nconst constants_1 = require(\"./constants\");\nconst router_store_1 = require(\"./global-state/router-store\");\nObject.defineProperty(exports, \"useRouteInfo\", {\n  enumerable: true,\n  get: function () {\n    return router_store_1.useRouteInfo;\n  }\n});\nconst imperative_api_1 = require(\"./imperative-api\");\nconst PreviewRouteContext_1 = require(\"./link/preview/PreviewRouteContext\");\nfunction useRootNavigationState() {\n  const parent = (0, native_1.useNavigation)().getParent(constants_1.INTERNAL_SLOT_NAME);\n  if (!parent) {\n    throw new Error('useRootNavigationState was called from a generated route. This is likely a bug in Expo Router.');\n  }\n  return parent.getState();\n}\nfunction useRootNavigation() {\n  return router_store_1.store.navigationRef.current;\n}\nfunction useNavigationContainerRef() {\n  return router_store_1.store.navigationRef;\n}\nconst displayWarningForProp = prop => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(`router.${prop} should not be used in a previewed screen. To fix this issue, wrap navigation calls with 'if (!isPreview) { ... }'.`);\n  }\n};\nconst createNOOPWithWarning = prop => () => displayWarningForProp(prop);\nconst routerWithWarnings = {\n  back: createNOOPWithWarning('back'),\n  canGoBack: () => {\n    displayWarningForProp('canGoBack');\n    return false;\n  },\n  push: createNOOPWithWarning('push'),\n  navigate: createNOOPWithWarning('navigate'),\n  replace: createNOOPWithWarning('replace'),\n  dismiss: createNOOPWithWarning('dismiss'),\n  dismissTo: createNOOPWithWarning('dismissTo'),\n  dismissAll: createNOOPWithWarning('dismissAll'),\n  canDismiss: () => {\n    displayWarningForProp('canDismiss');\n    return false;\n  },\n  setParams: createNOOPWithWarning('setParams'),\n  reload: createNOOPWithWarning('reload'),\n  prefetch: createNOOPWithWarning('prefetch')\n};\nfunction useRouter() {\n  const {\n    isPreview\n  } = (0, PreviewRouteContext_1.usePreviewInfo)();\n  if (isPreview) {\n    return routerWithWarnings;\n  }\n  return imperative_api_1.router;\n}\nfunction useUnstableGlobalHref() {\n  return (0, router_store_1.useRouteInfo)().unstable_globalHref;\n}\nfunction useSegments() {\n  return (0, router_store_1.useRouteInfo)().segments;\n}\nfunction usePathname() {\n  return (0, router_store_1.useRouteInfo)().pathname;\n}\nfunction useGlobalSearchParams() {\n  return (0, router_store_1.useRouteInfo)().params;\n}\nfunction useLocalSearchParams() {\n  const params = react_1.default.use(Route_1.LocalRouteParamsContext) ?? {};\n  const {\n    params: previewParams\n  } = (0, PreviewRouteContext_1.usePreviewInfo)();\n  return Object.fromEntries(Object.entries(previewParams ?? params).map(([key, value]) => {\n    if (value === undefined) {\n      return [key, undefined];\n    }\n    if (Array.isArray(value)) {\n      return [key, value.map(v => {\n        try {\n          return decodeURIComponent(v);\n        } catch {\n          return v;\n        }\n      })];\n    } else {\n      try {\n        return [key, decodeURIComponent(value)];\n      } catch {\n        return [key, value];\n      }\n    }\n  }));\n}\nfunction useSearchParams({\n  global = false\n} = {}) {\n  _s();\n  const globalRef = react_1.default.useRef(global);\n  if (process.env.NODE_ENV !== 'production') {\n    if (global !== globalRef.current) {\n      console.warn(`Detected change in 'global' option of useSearchParams. This value cannot change between renders`);\n    }\n  }\n  const params = global ? useGlobalSearchParams() : useLocalSearchParams();\n  const entries = Object.entries(params).flatMap(([key, value]) => {\n    if (global) {\n      if (key === 'params') return [];\n      if (key === 'screen') return [];\n    }\n    return Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]];\n  });\n  return new ReadOnlyURLSearchParams(entries);\n}\n_s(useSearchParams, \"IeVnztRIrO8T3oLyH4np+mzuLQY=\", false, function () {\n  return [useGlobalSearchParams, useLocalSearchParams];\n});\nclass ReadOnlyURLSearchParams extends URLSearchParams {\n  set() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  append() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  delete() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n}","map":{"version":3,"names":["_s","$RefreshSig$","exports","useRootNavigationState","useRootNavigation","useNavigationContainerRef","useRouter","useUnstableGlobalHref","useSegments","usePathname","useGlobalSearchParams","useLocalSearchParams","useSearchParams","native_1","require","react_1","__importDefault","Route_1","constants_1","router_store_1","Object","defineProperty","enumerable","get","useRouteInfo","imperative_api_1","PreviewRouteContext_1","parent","useNavigation","getParent","INTERNAL_SLOT_NAME","Error","getState","store","navigationRef","current","displayWarningForProp","prop","process","env","NODE_ENV","console","warn","createNOOPWithWarning","routerWithWarnings","back","canGoBack","push","navigate","replace","dismiss","dismissTo","dismissAll","canDismiss","setParams","reload","prefetch","isPreview","usePreviewInfo","router","unstable_globalHref","segments","pathname","params","default","use","LocalRouteParamsContext","previewParams","fromEntries","entries","map","key","value","undefined","Array","isArray","v","decodeURIComponent","global","globalRef","useRef","flatMap","ReadOnlyURLSearchParams","URLSearchParams","set","append","delete"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/hooks.ts"],"sourcesContent":["'use client';\n\nimport { NavigationProp, useNavigation } from '@react-navigation/native';\nimport React from 'react';\n\nimport { LocalRouteParamsContext } from './Route';\nimport { INTERNAL_SLOT_NAME } from './constants';\nimport { store, useRouteInfo } from './global-state/router-store';\nimport { router, Router } from './imperative-api';\nimport { usePreviewInfo } from './link/preview/PreviewRouteContext';\nimport { RouteParams, RouteSegments, UnknownOutputParams, Route } from './types';\n\nexport { useRouteInfo };\n\n/**\n * Returns the [navigation state](https://reactnavigation.org/docs/navigation-state/)\n * of the navigator which contains the current screen.\n *\n * @example\n * ```tsx\n * import { useRootNavigationState } from 'expo-router';\n *\n * export default function Route() {\n *  const { routes } = useRootNavigationState();\n *\n *  return <Text>{routes[0].name}</Text>;\n * }\n * ```\n */\nexport function useRootNavigationState() {\n  const parent =\n    // We assume that this is called from routes in __root\n    // Users cannot customize the generated Sitemap or NotFound routes, so we should be safe\n    useNavigation<NavigationProp<object, never, string>>().getParent(INTERNAL_SLOT_NAME);\n  if (!parent) {\n    throw new Error(\n      'useRootNavigationState was called from a generated route. This is likely a bug in Expo Router.'\n    );\n  }\n  return parent.getState();\n}\n\n/**\n * @deprecated Use [`useNavigationContainerRef`](#usenavigationcontainerref) instead,\n * which returns a React `ref`.\n */\nexport function useRootNavigation() {\n  return store.navigationRef.current;\n}\n\n/**\n * @return The root `<NavigationContainer />` ref for the app. The `ref.current` may be `null`\n * if the `<NavigationContainer />` hasn't mounted yet.\n */\nexport function useNavigationContainerRef() {\n  return store.navigationRef;\n}\n\nconst displayWarningForProp = (prop: string) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.warn(\n      `router.${prop} should not be used in a previewed screen. To fix this issue, wrap navigation calls with 'if (!isPreview) { ... }'.`\n    );\n  }\n};\n\nconst createNOOPWithWarning = (prop: string) => () => displayWarningForProp(prop);\n\nconst routerWithWarnings: Router = {\n  back: createNOOPWithWarning('back'),\n  canGoBack: () => {\n    displayWarningForProp('canGoBack');\n    return false;\n  },\n  push: createNOOPWithWarning('push'),\n  navigate: createNOOPWithWarning('navigate'),\n  replace: createNOOPWithWarning('replace'),\n  dismiss: createNOOPWithWarning('dismiss'),\n  dismissTo: createNOOPWithWarning('dismissTo'),\n  dismissAll: createNOOPWithWarning('dismissAll'),\n  canDismiss: () => {\n    displayWarningForProp('canDismiss');\n    return false;\n  },\n  setParams: createNOOPWithWarning('setParams'),\n  reload: createNOOPWithWarning('reload'),\n  prefetch: createNOOPWithWarning('prefetch'),\n};\n\n/**\n *\n * Returns the [Router](#router) object for imperative navigation.\n *\n * @example\n *```tsx\n * import { useRouter } from 'expo-router';\n * import { Text } from 'react-native';\n *\n * export default function Route() {\n *  const router = useRouter();\n *\n *  return (\n *   <Text onPress={() => router.push('/home')}>Go Home</Text>\n *  );\n *}\n * ```\n */\nexport function useRouter(): Router {\n  const { isPreview } = usePreviewInfo();\n  if (isPreview) {\n    return routerWithWarnings;\n  }\n  return router;\n}\n\n/**\n * @private\n * @returns The current global pathname with query params attached. This may change in the future to include the hostname\n * from a predefined universal link. For example, `/foobar?hey=world` becomes `https://acme.dev/foobar?hey=world`.\n */\nexport function useUnstableGlobalHref(): string {\n  return useRouteInfo().unstable_globalHref;\n}\n\n/**\n * Returns a list of selected file segments for the currently selected route. Segments are not normalized,\n * so they will be the same as the file path. For example, `/[id]?id=normal` becomes `[\"[id]\"]`.\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useSegments } from 'expo-router';\n *\n * export default function Route() {\n *   // segments = [\"profile\", \"[user]\"]\n *   const segments = useSegments();\n *\n *   return <Text>Hello</Text>;\n * }\n * ```\n *\n *\n * `useSegments` can be typed using an abstract. Consider the following file structure:\n *\n * ```md\n * - app\n *   - [user]\n *     - index.tsx\n *     - followers.tsx\n *   - settings.tsx\n * ```\n *\n *\n * This can be strictly typed using the following abstract with `useSegments` hook:\n *\n * ```tsx\n * const [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n * ```\n */\nexport function useSegments<TSegments extends Route = Route>(): RouteSegments<TSegments>;\n\n/**\n *  @hidden\n */\nexport function useSegments<TSegments extends RouteSegments<Route>>(): TSegments;\nexport function useSegments() {\n  return useRouteInfo().segments;\n}\n\n/**\n * Returns the currently selected route location without search parameters. For example, `/acme?foo=bar` returns `/acme`.\n * Segments will be normalized. For example, `/[id]?id=normal` becomes `/normal`.\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { usePathname } from 'expo-router';\n *\n * export default function Route() {\n *   // pathname = \"/profile/baconbrix\"\n *   const pathname = usePathname();\n *\n *   return <Text>Pathname: {pathname}</Text>;\n * }\n * ```\n */\nexport function usePathname(): string {\n  return useRouteInfo().pathname;\n}\n\n/**\n * @hidden\n */\nexport function useGlobalSearchParams<\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): TParams;\n\n/**\n * @hidden\n */\nexport function useGlobalSearchParams<TRoute extends Route>(): RouteParams<TRoute>;\n\n/**\n * Returns URL parameters for globally selected route, including dynamic path segments.\n * This function updates even when the route is not focused. Useful for analytics or\n * other background operations that don't draw to the screen.\n *\n * Route URL example: `acme://profile/baconbrix?extra=info`.\n *\n * When querying search params in a stack, opt-towards using\n * [`useLocalSearchParams`](#uselocalsearchparams) because it will only update when the route is focused.\n *\n * > **Note:** For usage information, see\n * [Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters).\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useGlobalSearchParams } from 'expo-router';\n *\n * export default function Route() {\n *   // user=baconbrix & extra=info\n *   const { user, extra } = useGlobalSearchParams();\n *\n *   return <Text>User: {user}</Text>;\n * }\n * ```\n */\nexport function useGlobalSearchParams<\n  TRoute extends Route,\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): RouteParams<TRoute> & TParams;\nexport function useGlobalSearchParams() {\n  return useRouteInfo().params;\n}\n\n/**\n * @hidden\n */\nexport function useLocalSearchParams<\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): TParams;\n\n/**\n * @hidden\n */\nexport function useLocalSearchParams<TRoute extends Route>(): RouteParams<TRoute>;\n\n/**\n * Returns the URL parameters for the contextually focused route. Useful for stacks where you may push a new screen\n * that changes the query parameters.  For dynamic routes, both the route parameters and the search parameters are returned.\n *\n * Route URL example: `acme://profile/baconbrix?extra=info`.\n *\n * To observe updates even when the invoking route is not focused, use [`useGlobalSearchParams`](#useglobalsearchparams).\n *\n * > **Note:** For usage information, see\n * [Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters).\n *\n * @example\n * ```tsx app/profile/[user].tsx\n * import { Text } from 'react-native';\n * import { useLocalSearchParams } from 'expo-router';\n *\n * export default function Route() {\n *  // user=baconbrix & extra=info\n *  const { user, extra } = useLocalSearchParams();\n *\n *  return <Text>User: {user}</Text>;\n * }\n */\nexport function useLocalSearchParams<\n  TRoute extends Route,\n  TParams extends UnknownOutputParams = UnknownOutputParams,\n>(): RouteParams<TRoute> & TParams;\nexport function useLocalSearchParams() {\n  const params = React.use(LocalRouteParamsContext) ?? {};\n  const { params: previewParams } = usePreviewInfo();\n  return Object.fromEntries(\n    Object.entries(previewParams ?? params).map(([key, value]) => {\n      // React Navigation doesn't remove \"undefined\" values from the params object, and you cannot remove them via\n      // navigation.setParams as it shallow merges. Hence, we hide them here\n      if (value === undefined) {\n        return [key, undefined];\n      }\n\n      if (Array.isArray(value)) {\n        return [\n          key,\n          value.map((v) => {\n            try {\n              return decodeURIComponent(v);\n            } catch {\n              return v;\n            }\n          }),\n        ];\n      } else {\n        try {\n          return [key, decodeURIComponent(value as string)];\n        } catch {\n          return [key, value];\n        }\n      }\n    })\n  ) as any;\n}\n\nexport function useSearchParams({ global = false } = {}): URLSearchParams {\n  const globalRef = React.useRef(global);\n  if (process.env.NODE_ENV !== 'production') {\n    if (global !== globalRef.current) {\n      console.warn(\n        `Detected change in 'global' option of useSearchParams. This value cannot change between renders`\n      );\n    }\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const params = global ? useGlobalSearchParams() : useLocalSearchParams();\n  const entries = Object.entries(params).flatMap(([key, value]) => {\n    if (global) {\n      if (key === 'params') return [];\n      if (key === 'screen') return [];\n    }\n\n    return Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]];\n  });\n\n  return new ReadOnlyURLSearchParams(entries);\n}\n\nclass ReadOnlyURLSearchParams extends URLSearchParams {\n  set() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  append() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n  delete() {\n    throw new Error('The URLSearchParams object return from useSearchParams is read-only');\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}