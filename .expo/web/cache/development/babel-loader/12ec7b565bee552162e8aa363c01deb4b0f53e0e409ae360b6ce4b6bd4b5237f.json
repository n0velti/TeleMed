{"ast":null,"code":"\"use strict\";\n'use client';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Redirect = Redirect;\nconst hooks_1 = require(\"../hooks\");\nconst useFocusEffect_1 = require(\"../useFocusEffect\");\nconst PreviewRouteContext_1 = require(\"./preview/PreviewRouteContext\");\nfunction Redirect({\n  href,\n  relativeToDirectory,\n  withAnchor\n}) {\n  const router = (0, hooks_1.useRouter)();\n  const isPreview = (0, PreviewRouteContext_1.useIsPreview)();\n  (0, useFocusEffect_1.useFocusEffect)(() => {\n    if (!isPreview) {\n      try {\n        router.replace(href, {\n          relativeToDirectory,\n          withAnchor\n        });\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  });\n  return null;\n}\n_c = Redirect;\nvar _c;\n$RefreshReg$(_c, \"Redirect\");","map":{"version":3,"names":["exports","Redirect","hooks_1","require","useFocusEffect_1","PreviewRouteContext_1","href","relativeToDirectory","withAnchor","router","useRouter","isPreview","useIsPreview","useFocusEffect","replace","error","console","_c","$RefreshReg$"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/link/Redirect.tsx"],"sourcesContent":["'use client';\n\nimport { useRouter } from '../hooks';\nimport type { Href } from '../types';\nimport { useFocusEffect } from '../useFocusEffect';\nimport { useIsPreview } from './preview/PreviewRouteContext';\n\nexport type RedirectProps = {\n  /**\n   * The path of the route to navigate to. It can either be:\n   * - **string**: A full path like `/profile/settings` or a relative path like `../settings`.\n   * - **object**: An object with a `pathname` and optional `params`. The `pathname` can be\n   * a full path like `/profile/settings` or a relative path like `../settings`. The\n   * params can be an object of key-value pairs.\n   *\n   * @example\n   * ```tsx Dynamic\n   * import { Redirect } from 'expo-router';\n   *\n   * export default function RedirectToAbout() {\n   *  return (\n   *    <Redirect href=\"/about\" />\n   *  );\n   *}\n   * ```\n   */\n  href: Href;\n\n  /**\n   * Relative URL references are either relative to the directory or the document.\n   * By default, relative paths are relative to the document.\n   *\n   * @see [Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references).\n   */\n  relativeToDirectory?: boolean;\n\n  /**\n   * Replaces the initial screen with the current route.\n   */\n  withAnchor?: boolean;\n};\n\n/**\n * Redirects to the `href` as soon as the component is mounted.\n *\n * @example\n * ```tsx\n * import { View, Text } from 'react-native';\n * import { Redirect } from 'expo-router';\n *\n * export default function Page() {\n *  const { user } = useAuth();\n *\n *  if (!user) {\n *    return <Redirect href=\"/login\" />;\n *  }\n *\n *  return (\n *    <View>\n *      <Text>Welcome Back!</Text>\n *    </View>\n *  );\n * }\n * ```\n */\nexport function Redirect({ href, relativeToDirectory, withAnchor }: RedirectProps) {\n  const router = useRouter();\n  const isPreview = useIsPreview();\n  useFocusEffect(() => {\n    if (!isPreview) {\n      try {\n        router.replace(href, { relativeToDirectory, withAnchor });\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  });\n  return null;\n}\n"],"mappings":";AAAA,YAAY;;;;;AAiEZA,OAAA,CAAAC,QAAA,GAAAA,QAAA;AA/DA,MAAAC,OAAA,GAAAC,OAAA;AAEA,MAAAC,gBAAA,GAAAD,OAAA;AACA,MAAAE,qBAAA,GAAAF,OAAA;AA4DA,SAAgBF,QAAQA,CAAC;EAAEK,IAAI;EAAEC,mBAAmB;EAAEC;AAAU,CAAiB;EAC/E,MAAMC,MAAM,GAAG,IAAAP,OAAA,CAAAQ,SAAS,GAAE;EAC1B,MAAMC,SAAS,GAAG,IAAAN,qBAAA,CAAAO,YAAY,GAAE;EAChC,IAAAR,gBAAA,CAAAS,cAAc,EAAC,MAAK;IAClB,IAAI,CAACF,SAAS,EAAE;MACd,IAAI;QACFF,MAAM,CAACK,OAAO,CAACR,IAAI,EAAE;UAAEC,mBAAmB;UAAEC;QAAU,CAAE,CAAC;MAC3D,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF;EACF,CAAC,CAAC;EACF,OAAO,IAAI;AACb;AAACE,EAAA,GAbehB,QAAQ;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}