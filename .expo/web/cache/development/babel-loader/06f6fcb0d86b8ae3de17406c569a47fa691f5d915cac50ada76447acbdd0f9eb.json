{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNavigationConfig = getNavigationConfig;\nexports.getLinkingConfig = getLinkingConfig;\nconst native_1 = require(\"@react-navigation/native\");\nconst expo_modules_core_1 = require(\"expo-modules-core\");\nconst constants_1 = require(\"./constants\");\nconst getReactNavigationConfig_1 = require(\"./getReactNavigationConfig\");\nconst getRoutesRedirects_1 = require(\"./getRoutesRedirects\");\nconst linking_1 = require(\"./link/linking\");\nfunction getNavigationConfig(routes, metaOnly, {\n  sitemap,\n  notFound\n}) {\n  const config = (0, getReactNavigationConfig_1.getReactNavigationConfig)(routes, metaOnly);\n  const sitemapRoute = (() => {\n    const path = '_sitemap';\n    if (sitemap === false || isPathInRootConfig(config, path)) {\n      return {};\n    }\n    return generateLinkingPathInRoot(constants_1.SITEMAP_ROUTE_NAME, path, metaOnly);\n  })();\n  const notFoundRoute = (() => {\n    const path = '*not-found';\n    if (notFound === false || isPathInRootConfig(config, path)) {\n      return {};\n    }\n    return generateLinkingPathInRoot(constants_1.NOT_FOUND_ROUTE_NAME, path, metaOnly);\n  })();\n  return {\n    screens: Object.assign({\n      [constants_1.INTERNAL_SLOT_NAME]: Object.assign({\n        path: ''\n      }, config)\n    }, sitemapRoute, notFoundRoute)\n  };\n}\nfunction getLinkingConfig(routes, context, getRouteInfo, {\n  metaOnly = true,\n  serverUrl,\n  redirects,\n  skipGenerated,\n  sitemap,\n  notFound\n}) {\n  let hasCachedInitialUrl = false;\n  let initialUrl;\n  const nativeLinkingKey = context.keys().find(key => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking = nativeLinkingKey ? context(nativeLinkingKey) : undefined;\n  const config = getNavigationConfig(routes, metaOnly, {\n    sitemap: skipGenerated ? false : sitemap,\n    notFound: skipGenerated ? false : notFound\n  });\n  return {\n    prefixes: [],\n    config,\n    getInitialURL() {\n      if (!hasCachedInitialUrl) {\n        if (expo_modules_core_1.Platform.OS === 'web') {\n          initialUrl = serverUrl ?? (0, linking_1.getInitialURL)();\n        } else {\n          initialUrl = serverUrl ?? (0, linking_1.getInitialURL)();\n          if (typeof initialUrl === 'string') {\n            initialUrl = (0, getRoutesRedirects_1.applyRedirects)(initialUrl, redirects);\n            if (initialUrl && typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({\n                path: initialUrl,\n                initial: true\n              });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then(url => {\n              url = (0, getRoutesRedirects_1.applyRedirects)(url, redirects);\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({\n                  path: url,\n                  initial: true\n                });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: (0, linking_1.subscribe)(nativeLinking, redirects),\n    getStateFromPath: (path, options) => {\n      return (0, linking_1.getStateFromPath)(path, options, getRouteInfo().segments);\n    },\n    getPathFromState(state, options) {\n      return (0, linking_1.getPathFromState)(state, Object.assign({}, config, options, {\n        screens: config.screens ?? options?.screens ?? {}\n      })) ?? '/';\n    },\n    getActionFromState: native_1.getActionFromState\n  };\n}\nfunction isPathInRootConfig(config, path) {\n  return Object.values(config.screens).some(screenConfig => typeof screenConfig === 'string' ? screenConfig === path : screenConfig.path === path);\n}\nfunction generateLinkingPathInRoot(name, path, metaOnly) {\n  if (metaOnly) {\n    return {\n      [name]: path\n    };\n  }\n  return {\n    [name]: {\n      path\n    }\n  };\n}","map":{"version":3,"names":["exports","getNavigationConfig","getLinkingConfig","native_1","require","expo_modules_core_1","constants_1","getReactNavigationConfig_1","getRoutesRedirects_1","linking_1","routes","metaOnly","sitemap","notFound","config","getReactNavigationConfig","sitemapRoute","path","isPathInRootConfig","generateLinkingPathInRoot","SITEMAP_ROUTE_NAME","notFoundRoute","NOT_FOUND_ROUTE_NAME","screens","Object","assign","INTERNAL_SLOT_NAME","context","getRouteInfo","serverUrl","redirects","skipGenerated","hasCachedInitialUrl","initialUrl","nativeLinkingKey","keys","find","key","match","nativeLinking","undefined","prefixes","getInitialURL","Platform","OS","applyRedirects","redirectSystemPath","initial","then","url","subscribe","getStateFromPath","options","segments","getPathFromState","state","getActionFromState","values","some","screenConfig","name"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\n\nimport { RouteNode } from './Route';\nimport { INTERNAL_SLOT_NAME, NOT_FOUND_ROUTE_NAME, SITEMAP_ROUTE_NAME } from './constants';\nimport { Options, State } from './fork/getPathFromState';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport { applyRedirects } from './getRoutesRedirects';\nimport { UrlObject } from './global-state/routeInfo';\nimport type { StoreRedirects } from './global-state/router-store';\nimport { getInitialURL, getPathFromState, getStateFromPath, subscribe } from './link/linking';\nimport { NativeIntent, RequireContext } from './types';\n\nexport function getNavigationConfig(\n  routes: RouteNode,\n  metaOnly: boolean,\n  { sitemap, notFound }: { sitemap: boolean; notFound: boolean }\n) {\n  const config = getReactNavigationConfig(routes, metaOnly);\n  const sitemapRoute = (() => {\n    const path = '_sitemap';\n    if (sitemap === false || isPathInRootConfig(config, path)) {\n      return {};\n    }\n    return generateLinkingPathInRoot(SITEMAP_ROUTE_NAME, path, metaOnly);\n  })();\n\n  const notFoundRoute = (() => {\n    const path = '*not-found';\n    if (notFound === false || isPathInRootConfig(config, path)) {\n      return {};\n    }\n    return generateLinkingPathInRoot(NOT_FOUND_ROUTE_NAME, path, metaOnly);\n  })();\n\n  return {\n    screens: {\n      [INTERNAL_SLOT_NAME]: {\n        path: '',\n        ...config,\n      },\n      ...sitemapRoute,\n      ...notFoundRoute,\n    },\n  };\n}\n\nexport type ExpoLinkingOptions<T extends object = Record<string, unknown>> = LinkingOptions<T> & {\n  getPathFromState: typeof getPathFromState;\n  getStateFromPath: typeof getStateFromPath;\n};\n\nexport type LinkingConfigOptions = {\n  metaOnly?: boolean;\n  serverUrl?: string;\n  getInitialURL?: typeof getInitialURL;\n  redirects?: StoreRedirects[];\n};\n\ninterface RouterOptions {\n  skipGenerated: boolean;\n  sitemap: boolean;\n  notFound: boolean;\n}\n\nexport function getLinkingConfig(\n  routes: RouteNode,\n  context: RequireContext,\n  getRouteInfo: () => UrlObject,\n  {\n    metaOnly = true,\n    serverUrl,\n    redirects,\n    skipGenerated,\n    sitemap,\n    notFound,\n  }: LinkingConfigOptions & RouterOptions\n): ExpoLinkingOptions {\n  // Returning `undefined` / `null from `getInitialURL` are valid values, so we need to track if it's been called.\n  let hasCachedInitialUrl = false;\n  let initialUrl: ReturnType<typeof getInitialURL> | undefined;\n\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  const config = getNavigationConfig(routes, metaOnly, {\n    sitemap: skipGenerated ? false : sitemap,\n    notFound: skipGenerated ? false : notFound,\n  });\n\n  return {\n    prefixes: [],\n    config,\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL() {\n      // Expo Router calls `getInitialURL` twice, which may confuse the user if they provide a custom `getInitialURL`.\n      // Therefor we memoize the result.\n      if (!hasCachedInitialUrl) {\n        if (Platform.OS === 'web') {\n          initialUrl = serverUrl ?? getInitialURL();\n        } else {\n          initialUrl = serverUrl ?? getInitialURL();\n\n          if (typeof initialUrl === 'string') {\n            initialUrl = applyRedirects(initialUrl, redirects);\n            if (initialUrl && typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({ path: initialUrl, initial: true });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then((url) => {\n              url = applyRedirects(url, redirects);\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({ path: url, initial: true });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: subscribe(nativeLinking, redirects),\n    getStateFromPath: <ParamList extends object>(path: string, options?: Options<ParamList>) => {\n      return getStateFromPath(path, options, getRouteInfo().segments);\n    },\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          ...config,\n          ...options,\n          screens: config.screens ?? options?.screens ?? {},\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n\nfunction isPathInRootConfig(\n  config: ReturnType<typeof getReactNavigationConfig>,\n  path: string\n): boolean {\n  return Object.values(config.screens).some((screenConfig) =>\n    typeof screenConfig === 'string' ? screenConfig === path : screenConfig.path === path\n  );\n}\n\nfunction generateLinkingPathInRoot(name: string, path: string, metaOnly: boolean) {\n  if (metaOnly) {\n    return { [name]: path };\n  }\n  return {\n    [name]: { path },\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}