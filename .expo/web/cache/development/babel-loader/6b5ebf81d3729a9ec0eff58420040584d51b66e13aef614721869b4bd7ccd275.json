{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.router = void 0;\nexports.useImperativeApiEmitter = useImperativeApiEmitter;\nconst react_1 = require(\"react\");\nconst routing_1 = require(\"./global-state/routing\");\nexports.router = {\n  navigate: routing_1.navigate,\n  push: routing_1.push,\n  dismiss: routing_1.dismiss,\n  dismissAll: routing_1.dismissAll,\n  dismissTo: routing_1.dismissTo,\n  canDismiss: routing_1.canDismiss,\n  replace: routing_1.replace,\n  back: () => (0, routing_1.goBack)(),\n  canGoBack: routing_1.canGoBack,\n  reload: routing_1.reload,\n  prefetch: routing_1.prefetch,\n  setParams: routing_1.setParams\n};\nfunction useImperativeApiEmitter(ref) {\n  const events = (0, react_1.useSyncExternalStore)(routing_1.routingQueue.subscribe, routing_1.routingQueue.snapshot, routing_1.routingQueue.snapshot);\n  (0, react_1.useEffect)(() => {\n    routing_1.routingQueue.run(ref);\n  }, [events, ref]);\n  return null;\n}","map":{"version":3,"names":["exports","useImperativeApiEmitter","react_1","require","routing_1","router","navigate","push","dismiss","dismissAll","dismissTo","canDismiss","replace","back","goBack","canGoBack","reload","prefetch","setParams","ref","events","useSyncExternalStore","routingQueue","subscribe","snapshot","useEffect","run"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/expo-router/src/imperative-api.tsx"],"sourcesContent":["import type { NavigationContainerRef, ParamListBase } from '@react-navigation/native';\nimport { type RefObject, useEffect, useSyncExternalStore } from 'react';\n\nimport {\n  canDismiss,\n  canGoBack,\n  dismiss,\n  dismissAll,\n  dismissTo,\n  goBack,\n  navigate,\n  NavigationOptions,\n  prefetch,\n  push,\n  reload,\n  replace,\n  routingQueue,\n  setParams,\n} from './global-state/routing';\nimport { Href, Route, RouteInputParams } from './types';\n\n/**\n * Returns `router` object for imperative navigation API.\n *\n * @example\n *```tsx\n * import { router } from 'expo-router';\n * import { Text } from 'react-native';\n *\n * export default function Route() {\n *\n *  return (\n *   <Text onPress={() => router.push('/home')}>Go Home</Text>\n *  );\n *}\n * ```\n */\nexport type Router = {\n  /**\n   * Goes back in the navigation history.\n   */\n  back: () => void;\n  /**\n   * Navigates to a route in the navigator's history if it supports invoking the `back` function.\n   */\n  canGoBack: () => boolean;\n  /**\n   * Navigates to the provided [`href`](#href) using a push operation if possible.\n   */\n  push: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the provided [`href`](#href).\n   */\n  navigate: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to route without appending to the history. Can be used with\n   * [`useFocusEffect`](#usefocuseffecteffect-do_not_pass_a_second_prop)\n   * to redirect imperatively to a new screen.\n   *\n   * @see [Using `useRouter()` hook](/router/reference/redirects/) to redirect.\n   * */\n  replace: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the a stack lower than the current screen using the provided count if possible, otherwise 1.\n   *\n   * If the current screen is the only route, it will dismiss the entire stack.\n   */\n  dismiss: (count?: number) => void;\n  /**\n   * Dismisses screens until the provided href is reached. If the href is not found, it will instead replace the current screen with the provided `href`.\n   */\n  dismissTo: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Returns to the first screen in the closest stack. This is similar to\n   * [`popToTop`](https://reactnavigation.org/docs/stack-actions/#poptotop) stack action.\n   */\n  dismissAll: () => void;\n  /**\n   * Checks if it is possible to dismiss the current screen. Returns `true` if the\n   * router is within the stack with more than one screen in stack's history.\n   *\n   */\n  canDismiss: () => boolean;\n  /**\n   * Updates the current route's query params.\n   */\n  setParams: <T extends Route>(params: Partial<RouteInputParams<T>>) => void;\n  /**\n   * Reloads the currently mounted route in experimental server mode. This can be used to re-fetch data.\n   * @hidden\n   */\n  reload: () => void;\n  /**\n   * Prefetch a screen in the background before navigating to it\n   */\n  prefetch: (name: Href) => void;\n};\n\n/**\n * @hidden\n */\nexport const router: Router = {\n  navigate,\n  push,\n  dismiss,\n  dismissAll,\n  dismissTo,\n  canDismiss,\n  replace,\n  back: () => goBack(),\n  canGoBack,\n  reload,\n  prefetch,\n  setParams: setParams as Router['setParams'],\n};\n\nexport function useImperativeApiEmitter(\n  ref: RefObject<NavigationContainerRef<ParamListBase> | null>\n) {\n  const events = useSyncExternalStore(\n    routingQueue.subscribe,\n    routingQueue.snapshot,\n    routingQueue.snapshot\n  );\n  useEffect(() => {\n    routingQueue.run(ref);\n  }, [events, ref]);\n  return null;\n}\n"],"mappings":";;;;;;AAoHAA,OAAA,CAAAC,uBAAA,GAAAA,uBAAA;AAnHA,MAAAC,OAAA,GAAAC,OAAA;AAEA,MAAAC,SAAA,GAAAD,OAAA;AAkGaH,OAAA,CAAAK,MAAM,GAAW;EAC5BC,QAAQ,EAARF,SAAA,CAAAE,QAAQ;EACRC,IAAI,EAAJH,SAAA,CAAAG,IAAI;EACJC,OAAO,EAAPJ,SAAA,CAAAI,OAAO;EACPC,UAAU,EAAVL,SAAA,CAAAK,UAAU;EACVC,SAAS,EAATN,SAAA,CAAAM,SAAS;EACTC,UAAU,EAAVP,SAAA,CAAAO,UAAU;EACVC,OAAO,EAAPR,SAAA,CAAAQ,OAAO;EACPC,IAAI,EAAEA,CAAA,KAAM,IAAAT,SAAA,CAAAU,MAAM,GAAE;EACpBC,SAAS,EAATX,SAAA,CAAAW,SAAS;EACTC,MAAM,EAANZ,SAAA,CAAAY,MAAM;EACNC,QAAQ,EAARb,SAAA,CAAAa,QAAQ;EACRC,SAAS,EAAEd,SAAA,CAAAc;CACZ;AAED,SAAgBjB,uBAAuBA,CACrCkB,GAA4D;EAE5D,MAAMC,MAAM,GAAG,IAAAlB,OAAA,CAAAmB,oBAAoB,EACjCjB,SAAA,CAAAkB,YAAY,CAACC,SAAS,EACtBnB,SAAA,CAAAkB,YAAY,CAACE,QAAQ,EACrBpB,SAAA,CAAAkB,YAAY,CAACE,QAAQ,CACtB;EACD,IAAAtB,OAAA,CAAAuB,SAAS,EAAC,MAAK;IACbrB,SAAA,CAAAkB,YAAY,CAACI,GAAG,CAACP,GAAG,CAAC;EACvB,CAAC,EAAE,CAACC,MAAM,EAAED,GAAG,CAAC,CAAC;EACjB,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}