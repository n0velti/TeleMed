{"ast":null,"code":"var _jsxFileName = \"/Users/edward/Documents/TeleMed/TeleMed/node_modules/@expo/metro-runtime/src/error-overlay/UI/LogBoxButton.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as LogBoxStyle from './LogBoxStyle';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function LogBoxButton(props) {\n  _s();\n  const [pressed, setPressed] = useState(false);\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6)\n    };\n  }\n  const content = _jsxDEV(View, {\n    style: [Object.assign({\n      backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default\n    }, Platform.select({\n      web: {\n        cursor: 'pointer'\n      }\n    })), props.style],\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n  return props.onPress == null ? content : _jsxDEV(Pressable, {\n    hitSlop: props.hitSlop,\n    onPress: props.onPress,\n    onPressIn: () => setPressed(true),\n    onPressOut: () => setPressed(false),\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(LogBoxButton, \"DPHG9W12kHGq8FFQtt6pAxE5+Z0=\");\n_c = LogBoxButton;\nvar _c;\n$RefreshReg$(_c, \"LogBoxButton\");","map":{"version":3,"names":["React","useState","Platform","Pressable","View","LogBoxStyle","jsxDEV","_jsxDEV","LogBoxButton","props","_s","pressed","setPressed","backgroundColor","default","getBackgroundColor","content","style","Object","assign","select","web","cursor","children","fileName","_jsxFileName","lineNumber","columnNumber","onPress","hitSlop","onPressIn","onPressOut","_c","$RefreshReg$"],"sources":["/Users/edward/Documents/TeleMed/TeleMed/node_modules/@expo/metro-runtime/src/error-overlay/UI/LogBoxButton.tsx"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useState } from 'react';\nimport { GestureResponderEvent, Insets, Platform, Pressable, View, ViewStyle } from 'react-native';\n\nimport * as LogBoxStyle from './LogBoxStyle';\n\ntype Props = {\n  backgroundColor: {\n    default: string;\n    pressed: string;\n  };\n  children?: any;\n  hitSlop?: Insets;\n  onPress?: ((event: GestureResponderEvent) => void) | null;\n  style?: ViewStyle;\n};\n\nexport function LogBoxButton(props: Props) {\n  const [pressed, setPressed] = useState(false);\n\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6),\n    };\n  }\n\n  const content = (\n    <View\n      style={[\n        {\n          backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default,\n          ...Platform.select({\n            web: {\n              cursor: 'pointer',\n            },\n          }),\n        },\n        props.style,\n      ]}>\n      {props.children}\n    </View>\n  );\n\n  return props.onPress == null ? (\n    content\n  ) : (\n    <Pressable\n      hitSlop={props.hitSlop}\n      onPress={props.onPress}\n      onPressIn={() => setPressed(true)}\n      onPressOut={() => setPressed(false)}>\n      {content}\n    </Pressable>\n  );\n}\n"],"mappings":";;AAOA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,IAAA;AAGxC,OAAO,KAAKC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAa7C,OAAO,SAASC,YAAYA,CAACC,KAAY,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7C,IAAIY,eAAe,GAAGJ,KAAK,CAACI,eAAe;EAC3C,IAAI,CAACA,eAAe,EAAE;IACpBA,eAAe,GAAG;MAChBC,OAAO,EAAET,WAAW,CAACU,kBAAkB,CAAC,IAAI,CAAC;MAC7CJ,OAAO,EAAEN,WAAW,CAACU,kBAAkB,CAAC,GAAG;IAC7C,CAAC;EACH;EAEA,MAAMC,OAAO,GACXT,OAAA,CAACH,IAAI;IACHa,KAAK,EAAE,CAAAC,MAAA,CAAAC,MAAA;MAEHN,eAAe,EAAEF,OAAO,GAAGE,eAAe,CAACF,OAAO,GAAGE,eAAe,CAACC;IAAO,GACzEZ,QAAQ,CAACkB,MAAM,CAAC;MACjBC,GAAG,EAAE;QACHC,MAAM,EAAE;MACV;IACF,CAAC,CAAC,GAEJb,KAAK,CAACQ,KAAK,CACX;IAAAM,QAAA,EACDd,KAAK,CAACc;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CACP;EAED,OAAOlB,KAAK,CAACmB,OAAO,IAAI,IAAI,GAC1BZ,OAAO,GAEPT,OAAA,CAACJ,SAAS;IACR0B,OAAO,EAAEpB,KAAK,CAACoB,OAAQ;IACvBD,OAAO,EAAEnB,KAAK,CAACmB,OAAQ;IACvBE,SAAS,EAAEA,CAAA,KAAMlB,UAAU,CAAC,IAAI,CAAE;IAClCmB,UAAU,EAAEA,CAAA,KAAMnB,UAAU,CAAC,KAAK,CAAE;IAAAW,QAAA,EACnCP;EAAO;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CACZ;AACH;AAACjB,EAAA,CAvCeF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}